#write.csv(output_all_services_2, file = "output_all_services_2.csv")
#### Section 3. Generate billing doc output file (line by line comparison). Its a merger between AP invoice and the newly calculated cols ####
# join the selected columns onto the billing doc in the correct places
# this creates the billing_doc_output which is a just the original output withe the new columns added. To be used to inspect individual lines
#### 3.a Specify which columns to merge with AP invoice and join in correct spot ----
# Specify columns to merge from output_all_services_2
merge_cols <- c( "service", "uplift", "DESCRIPTION", "BILLING.DOC", "ARTICLE.ID",
"base_charge_incgst", "base_charge_exgst", "base_charge_tax", "charge_value_uplift", "uplift_figure_exgst",
"charge_to_custo_exgst", "cubic_weight", "max_weight", "fuel_surcharge","fuel_surcharge_uplifted", "fuel_gst","fuel_surchrg_uplift_gst", "sec_mng_chrg", "sec_mng_chrg_uplifted", "sec_mng_gst", "sec_mng_uplifted_gst",
"over_max_limits_fee", "weight_category_max", "warnings", "is_gst_free_zone")
selected_output_all_services_2 <- output_all_services_2[, merge_cols]
# this can probably all go now
# Merge bill and selected columns from output_all_services_2 by the unique identifier
billing_doc_output <- merge(bill, selected_output_all_services_2, by = c("ARTICLE.ID", "BILLING.DOC", "DESCRIPTION"), all = TRUE)
# Insert new columns after "AVG..UNIT.PRICE"
avg_unit_price_index <- which(names(billing_doc_output ) == "AMOUNT.INCL.TAX")
billing_doc_output  <- cbind(billing_doc_output [, 1:avg_unit_price_index],
billing_doc_output [, c("base_charge_incgst","base_charge_exgst", "base_charge_tax", "charge_value_uplift", "uplift_figure_exgst", "charge_to_custo_exgst", "warnings")],
billing_doc_output [, (avg_unit_price_index + 1):ncol(billing_doc_output )])
# Insert new columns after "FUEL.GST"
fuel_gst_index <- which(names(billing_doc_output ) == "FUEL.GST")
billing_doc_output  <- cbind(billing_doc_output [, 1:fuel_gst_index  ],
billing_doc_output [, c("fuel_surcharge" ,"fuel_gst", "sec_mng_chrg", "sec_mng_gst", "over_max_limits_fee")],
billing_doc_output [, (fuel_gst_index  + 1):ncol(billing_doc_output )])
# Insert new columns after "BILLED.WEIGHT"
billed_weight_index <- which(names(billing_doc_output ) == "BILLED.WEIGHT")
billing_doc_output  <- cbind(billing_doc_output [, 1:billed_weight_index  ],
billing_doc_output [, c("cubic_weight", "max_weight", "weight_category_max", "service", "uplift")],
billing_doc_output [, (billed_weight_index  + 1):ncol(billing_doc_output )])
# Quick descrepancy check for testing purposes
discrepancy <- function(billing_doc_output) {
# Check if the rounded value of AMOUNT.EXCL.TAX is equal to base_charge_exgst
billing_doc_output$discrepancy <- ifelse(
round(billing_doc_output$AMOUNT.INCL.TAX, 2) == round(billing_doc_output$base_charge_incgst, 2),
"no",
"yes"
)
return(billing_doc_output)
}
billing_doc_output <- discrepancy(billing_doc_output)
#### 3.b remove duplicates and re-order columns ----
desired_order <- c("ARTICLE.ID", "BILLING.DOC", "DESCRIPTION", "CUSTOMER", "NAME_1", "NAME_2", "NAME_3", "STREET", "CITY", "REGION", "POST.CODE",
"TELEPHONE", "FAX.NUMBER", "MAILING.STATEMENT.NO.", "ASSIGNMENT.NO.", "SERVICE.DATE", "WORK.CENTRE", "WORK.CENTRE.NAME", "CUSTOMER.REF", "CUSTOMER.REFDOC",
"ITEM", "MATERIAL", "QTY", "AVG..UNIT.PRICE", "AMOUNT.INCL.TAX", "base_charge_incgst", "base_charge_exgst", "discrepancy", "base_charge_tax", "charge_value_uplift",
"uplift_figure_exgst", "charge_to_custo_exgst", "warnings", "TAX.CODE", "TAX.AMOUNT", "AMOUNT.EXCL.TAX", "INVOICE.TOTAL", "TOTAL.QTY", "BILLING.CURRENCY",
"EXCHANGE.RATE", "LOCAL.CURRENCY", "FUEL.SURCHARGE..", "FUEL.SURCHARGE.DISC", "FUEL.GST", "fuel_surcharge","fuel_surcharge_uplifted", "fuel_gst","fuel_surchrg_uplift_gst",
"sec_mng_chrg", "sec_mng_chrg_uplifted", "sec_mng_gst", "sec_mng_uplifted_gst",
"over_max_limits_fee", "MHS.FEE", "MHS.DISCOUNT", "MHS.GST", "SMC.FEE", "SMC.DISCOUNT", "SMC.GST", "INTL.SURCHARGE", "INTL.SURCHARGE.MANIFEST", "INVOICE.NO",
"BILLING.DATE", "SALES.ORDER", "SALES.ORDER.ITEM", "PAYER", "PAYER.NAME", "CONSIGNMENT.ID", "LODGEMENT.DATE", "ACTUAL.WEIGHT", "ACTUAL.UNIT", "ACTUAL.LENGTH",
"ACTUAL.WIDTH", "ACTUAL.HEIGHT", "ACTUAL.UNIT.TYPE", "DECLARED.WEIGHT", "DECLARED.UNIT", "DECLARED.LENGTH", "DECLARED.WIDTH", "DECLARED.HEIGHT",
"DECLARED.UNIT.TYPE", "FROM.NAME", "FROM.ADDRESS", "FROM.CITY", "FROM.STATE", "FROM.POSTAL.CODE", "FROM.EMAIL.ADDRESS", "TO.NAME", "TO.ADDRESS", "TO.CITY",
"TO.STATE", "TO.POSTAL.CODE", "TO.EMAIL.ADDRESS", "RECORD.COUNT", "TOT.AMOUNT.EXCL.TAX", "CUST.REF.1", "CUST.REF.2", "BILLED.LENGTH", "BILLED.WIDTH",
"BILLED.HEIGHT", "CUBIC.WEIGHT", "BILLED.WEIGHT", "cubic_weight", "max_weight", "weight_category_max", "service", "uplift", "INTERNATIONAL.SURCHARGE.RATE",
"CHARGE.CODE", "CHARGE.ZONE", "ATO.DESPATCH.REFERENCE.NUMBER", "RECEIVING.COUNTRY", "SIGNATURE.ON.DELIVERY", "TRANSIT.COVER", "CAPTURE.ID",
"UNMANIFESTED.ARTICLE", "RETURN.TO.SENDER", "LODGEMENT.ZONE", "DESTINATION.ZONE", "CUST.REF.3", "WINE...ALCOHOL", "PEAK.FEE", "PEAK.FEE.DISCOUNT",
"PEAK.FEE.GST", "OVER.MAX.LIMITS.FEE", "OVER.MAX.LIMITS.FEE.DISCOUNT", "OVER.MAX.LIMITS.FEE.GST", "INTERNATIONAL.UNMANIFESTED.FEE", "customer_code2",
"customer_code", "is_gst_free_zone")
# Reorder the columns in final_output
billing_doc_output <- billing_doc_output [, desired_order]
#### 3.c sum the aggregation lines ----
# Calculate the sum of fuel_surcharge_uplifted per BILLING.DOC
fuel_surcharge_per_billing_doc <- billing_doc_output %>%
filter(is_gst_free_zone == 'No') %>%
group_by(BILLING.DOC) %>%
summarise(total_fuel_surcharge = sum(fuel_surcharge_uplifted, na.rm = TRUE))
# Merge the total_fuel_surcharge back to the original dataframe
billing_doc_output <- left_join(billing_doc_output, fuel_surcharge_per_billing_doc, by = "BILLING.DOC")
# Update base_charge_exgst with the total fuel surcharge where DESCRIPTION is "AP Parcels Domestic Fuel Surcharge"
billing_doc_output <- billing_doc_output %>%
mutate(base_charge_exgst = ifelse(DESCRIPTION == "AP Parcels Domestic Fuel Surcharge",
total_fuel_surcharge,
base_charge_exgst)) %>% select(-total_fuel_surcharge)
#### sum the fuel_surcharg tax free ---
fuel_surcharge_per_billing_doc <- billing_doc_output %>%
filter(is_gst_free_zone == 'Yes') %>%
group_by(BILLING.DOC) %>%
summarise(total_fuel_surcharge = sum(fuel_surcharge_uplifted, na.rm = TRUE))
billing_doc_output <- left_join(billing_doc_output, fuel_surcharge_per_billing_doc, by = "BILLING.DOC")
billing_doc_output <- billing_doc_output %>%
mutate(base_charge_exgst = ifelse(DESCRIPTION == "AP Parcels Domestic Fuel Surchg Tax Free",
total_fuel_surcharge,
base_charge_exgst)) %>% select(-total_fuel_surcharge)
#### sum the security management fee ----
sec_mng_chrg_per_billing_doc <- billing_doc_output %>%
filter(is_gst_free_zone == 'No') %>%
group_by(BILLING.DOC) %>%
summarise(total_sec_mng_chrg = sum(sec_mng_chrg_uplifted, na.rm = TRUE))
billing_doc_output <- left_join(billing_doc_output, sec_mng_chrg_per_billing_doc, by = "BILLING.DOC")
billing_doc_output <- billing_doc_output %>%
mutate(base_charge_exgst = ifelse(DESCRIPTION == "AP Security Mgt Charge",
total_sec_mng_chrg,
base_charge_exgst)) %>% select(-total_sec_mng_chrg)
#### sum the security AP Security Mgt Charge Tax Free ----
sec_mng_chrg_per_billing_doc <- billing_doc_output %>%
filter(is_gst_free_zone == 'Yes') %>%
group_by(BILLING.DOC) %>%
summarise(total_sec_mng_chrg = sum(sec_mng_chrg_uplifted, na.rm = TRUE))
billing_doc_output <- left_join(billing_doc_output, sec_mng_chrg_per_billing_doc, by = "BILLING.DOC")
billing_doc_output <- billing_doc_output %>%
mutate(base_charge_exgst = ifelse(DESCRIPTION == "AP Security Mgt Charge Tax Free",
total_sec_mng_chrg,
base_charge_exgst)) %>% select(-total_sec_mng_chrg)
#### 3.d bring across the services we are not uplifting ----
billing_doc_output$base_charge_incgst <- ifelse(billing_doc_output$DESCRIPTION %in% c(
"More to Pay",
"On Demand Return to Sender",
"STC Parcels Domestic Fuel Surcharge",
"Duties and Taxes Admin Fee (DDP)",
"Delivered Duty Paid",
"AP International Line Haul Surcharge",
"International  Returns AIR",
"Lodgement Management Fee",
"Unmanifest Article"),
billing_doc_output$AMOUNT.INCL.TAX,
billing_doc_output$base_charge_incgst)
billing_doc_output$base_charge_exgst <- ifelse(billing_doc_output$DESCRIPTION %in% c(
"More to Pay",
"On Demand Return to Sender",
"STC Parcels Domestic Fuel Surcharge",
"Duties and Taxes Admin Fee (DDP)",
"Delivered Duty Paid",
"AP International Line Haul Surcharge",
"International  Returns AIR",
"Lodgement Management Fee",
"Unmanifest Article"),
billing_doc_output$AMOUNT.EXCL.TAX,
billing_doc_output$base_charge_exgst)
#### 3.e get final charge per customer -----
#billing_doc_output$avg_unit_price_charge_to_custo_ex_gst <- billing_doc_output$QTY * billing_doc_output$charge_to_custo_exgst
max_charge <- pmax(billing_doc_output$charge_to_custo_exgst, billing_doc_output$base_charge_exgst, na.rm = TRUE)
max_charge[is.na(max_charge)] <- 0
billing_doc_output$charge_to_custo_exgst <- max_charge
billing_doc_output$avg_unit_price_charge_to_custo_ex_gst <- billing_doc_output$QTY * billing_doc_output$charge_to_custo_exgst
#### 3.f generate the file path ----
output_folder <- file.path(getwd(), paste0("output_billing_dates_", predefined_text))
if (!file.exists(output_folder)) {
dir.create(output_folder, recursive = TRUE)
}
file_name <- paste0("billing_doc_output_", predefined_text, ".csv")
full_file_path <- file.path(output_folder, file_name)
write.csv(billing_doc_output, file = full_file_path, row.names = FALSE)
#### aggregation block ----
# this will be used to generate the sums and the ap_post_supply will be taken from here
#create international_charge_zone
billing_doc_output$intl_charge_zone <- billing_doc_output$CHARGE.ZONE
#### 3.g Redefine the services for the supply file ----
# Restructuring to define the services for the outputs
billing_doc_output$Service <- ""
# Restructuring to define the services for the outputs
billing_doc_output$Service <- ""
# Mapping descriptions to services
billing_doc_output$Service[billing_doc_output$DESCRIPTION == "Delivered Duty Paid" |
billing_doc_output$DESCRIPTION == "Over Maximum Limits Fee"]               <- "Additional Charges"
billing_doc_output$Service[billing_doc_output$DESCRIPTION == "Duties and Taxes Admin Fee (DDP)"]        <- "Add'l Charges - DDP"
billing_doc_output$Service[billing_doc_output$DESCRIPTION == "APGL NZ Express w/Signature"]             <- "APGL NZ Express"
billing_doc_output$Service[billing_doc_output$DESCRIPTION == "Imprint Large Charge Letters Regular" |
billing_doc_output$DESCRIPTION == "Imprint Large Charge Letters Priority" |
billing_doc_output$DESCRIPTION == "Imprint Small Charge Letters Regular"]  <- "ELMS"
billing_doc_output$Service[billing_doc_output$DESCRIPTION == "Express Post with Signature"|
billing_doc_output$DESCRIPTION == "AP Security Mgt Charge" |
billing_doc_output$DESCRIPTION == "AP Security Mgt Charge Tax Free"|
billing_doc_output$DESCRIPTION == "Express Post Parcels (BYO up to 5kg)"]  <- "eParcel Express"
billing_doc_output$Service[billing_doc_output$DESCRIPTION == "Express Post eparcel returns" ]           <- "eParcel Express Returns"
billing_doc_output$Service[billing_doc_output$DESCRIPTION == "PACK AND TRACK INTERNATIONAL"|
billing_doc_output$DESCRIPTION == "Express Courier International (eParcel)"] <- "eParcel International"
billing_doc_output$Service[billing_doc_output$DESCRIPTION == "AP International Line Haul Surcharge"]    <- "eParcel International Line Haul Surcharge"
billing_doc_output$Service[billing_doc_output$DESCRIPTION == "International Returns Express"|
billing_doc_output$DESCRIPTION == "International Returns AIR"]           <- "eParcel International Returns"  # check here for typo
billing_doc_output$Service[billing_doc_output$DESCRIPTION == "Parcel Post with Signature"|
billing_doc_output$DESCRIPTION == "AP Parcels Domestic Fuel Surcharge" |
billing_doc_output$DESCRIPTION == "AP Parcels Domestic Fuel Surchg Tax Free"|
billing_doc_output$DESCRIPTION == "AP Manual Handling Surcharge"|
billing_doc_output$DESCRIPTION == "Weekend & Public Holiday Collections"|
billing_doc_output$DESCRIPTION == "eParcel"|
billing_doc_output$DESCRIPTION == "Underpaid Parcels Charges"|
billing_doc_output$DESCRIPTION == "AP Manual Handling Surcharge Tax Free"] <- "eParcel Regular"
billing_doc_output$Service[billing_doc_output$DESCRIPTION == "eParcel Return To Sender" |
billing_doc_output$DESCRIPTION == "eParcel Post Return" |
billing_doc_output$DESCRIPTION == "Local Pickup and Delivery Services"|
billing_doc_output$DESCRIPTION == "Return Paid Parcels Local"|
billing_doc_output$DESCRIPTION == "eParcel Call For Return"|
billing_doc_output$DESCRIPTION == "Lodgement Management Fee" |
billing_doc_output$DESCRIPTION == "More to Pay" |
billing_doc_output$DESCRIPTION == "Unmanifest Article" |
billing_doc_output$DESCRIPTION == "Return To Sender Parcels" ]             <- "eParcel Regular Returns"
billing_doc_output$Service[billing_doc_output$DESCRIPTION == "EPARCEL WINE STD"] <- "eParcel Wine"
billing_doc_output$Service[billing_doc_output$DESCRIPTION == "On Demand Return to Sender" |
billing_doc_output$DESCRIPTION == "STC Parcels Domestic Fuel Surcharge" |
billing_doc_output$DESCRIPTION == "On Demand Afternoon" |
billing_doc_output$DESCRIPTION == "On Demand Tonight" |
billing_doc_output$DESCRIPTION == "STC Sundry" |
billing_doc_output$DESCRIPTION == "STC EMS"]                               <- "StarTrack OnDemand"
#### 3.h Remove the compensation rows ----
#Remove rows where DESCRIPTION is blank
billing_doc_output <- billing_doc_output[!is.na(billing_doc_output$DESCRIPTION) & billing_doc_output$DESCRIPTION != "", ]
# Produce the output for in the right structure this will be the basis for the aggregation and calculation files
# need to determine if we remove the below
desired_order <- c(
"customer_code", "NAME_1", "MAILING.STATEMENT.NO.", "ASSIGNMENT.NO." , "SERVICE.DATE" , "DESCRIPTION",
"BILLING.DATE", "CONSIGNMENT.ID", "ARTICLE.ID", "LODGEMENT.DATE", "ACTUAL.WEIGHT", "ACTUAL.UNIT", "ACTUAL.LENGTH",
"ACTUAL.WIDTH", "ACTUAL.HEIGHT", "ACTUAL.UNIT.TYPE",
"DECLARED.UNIT.TYPE", "DECLARED.WEIGHT",	"DECLARED.UNIT",	"DECLARED.LENGTH",	"DECLARED.WIDTH",
"DECLARED.HEIGHT",	"DECLARED.UNIT.TYPE", "FROM.NAME", 	"FROM.ADDRESS",	"FROM.CITY",	"FROM.STATE",	"FROM.POSTAL.CODE",
"TO.NAME",	"TO.ADDRESS",	"TO.CITY",	"TO.STATE",	"TO.POSTAL.CODE", "CUST.REF.1",	"CUST.REF.2",	"BILLED.LENGTH", "BILLED.WIDTH",
"BILLED.HEIGHT", "CUBIC.WEIGHT", "BILLED.WEIGHT", "CHARGE.CODE", "RECEIVING.COUNTRY", "intl_charge_zone", "CHARGE.ZONE", "Service", "QTY", "AMOUNT.INCL.TAX",
"AMOUNT.EXCL.TAX", "base_charge_incgst", "base_charge_exgst", "uplift_figure_exgst", "charge_to_custo_exgst", "fuel_surcharge", "FUEL.SURCHARGE..",
"SMC.FEE", "sec_mng_chrg", "over_max_limits_fee", "BILLING.DOC", "is_gst_free_zone"#, "OVER.MAX.LIMITS.FEE"
)
# Reorder the columns in final_output
#billing_doc_output <- billing_doc_output [, desired_order]
#### 3.i reorder and rename columns for ap_post_supply ----
desired_order <- c(
"customer_code", "NAME_1", "MAILING.STATEMENT.NO.", "ASSIGNMENT.NO.", "SERVICE.DATE", "DESCRIPTION",
"BILLING.DATE", "CONSIGNMENT.ID", "ARTICLE.ID", "LODGEMENT.DATE", "ACTUAL.WEIGHT", "ACTUAL.UNIT", "ACTUAL.LENGTH",
"ACTUAL.WIDTH", "ACTUAL.HEIGHT", "ACTUAL.UNIT.TYPE", "DECLARED.WEIGHT",	"DECLARED.UNIT",	"DECLARED.LENGTH",	"DECLARED.WIDTH",
"DECLARED.HEIGHT",	"DECLARED.UNIT.TYPE", "FROM.NAME", 	"FROM.ADDRESS",	"FROM.CITY",	"FROM.STATE",	"FROM.POSTAL.CODE",
"TO.NAME",	"TO.ADDRESS",	"TO.CITY",	"TO.STATE",	"TO.POSTAL.CODE", "CUST.REF.1",	"CUST.REF.2",	"BILLED.LENGTH", "BILLED.WIDTH",
"BILLED.HEIGHT", "CUBIC.WEIGHT", "BILLED.WEIGHT", "CHARGE.CODE", "intl_charge_zone", "RECEIVING.COUNTRY", "CHARGE.ZONE", "Service", "QTY",
"avg_unit_price_charge_to_custo_ex_gst", "charge_to_custo_exgst")
# Reorder the columns in final_output.
# this is needed for the consoladated
ap_post_supply <- billing_doc_output [, desired_order]
# new column names as per desired output
new_col_names <- c("Code", "NAME_1", "MAILING STATEMENT NO.", "ASSIGNMENT NO.", "SERVICE DATE", "DESCRIPTION", "BILLING DATE", "CONSIGNMENT ID",
"ARTICLE ID", "LODGEMENT DATE", "ACTUAL WEIGHT", "ACTUAL UNIT", "ACTUAL LENGTH", "ACTUAL WIDTH", "ACTUAL HEIGHT", "ACTUAL UNIT TYPE",
"DECLARED WEIGHT", "DECLARED UNIT", "DECLARED LENGTH", "DECLARED WIDTH", "DECLARED HEIGHT", "DECLARED UNIT TYPE", "FROM NAME",
"FROM ADDRESS", "FROM CITY", "FROM STATE", "FROM POSTAL CODE", "TO NAME", "TO ADDRESS", "TO CITY", "TO STATE", "TO POSTAL CODE",
"CUST REF 1", "CUST REF 2", "BILLED LENGTH", "BILLED WIDTH", "BILLED HEIGHT", "CUBIC WEIGHT", "BILLED WEIGHT", "CHARGE CODE",
"INTL CHARGE ZONE", "RECEIVING COUNTRY", "Charge Zone", "Service", "QTY", "AVG. UNIT PRICE EX GST", "AMOUNT EX GST")
names(ap_post_supply) <- new_col_names
#### 3.j create a folder to store outputs ----
folder_name <- paste0("ap_post_supply_", predefined_text, ".csv")
# Replace invalid characters in folder name
clean_folder_name <- gsub("[^A-Za-z0-9._-]", "_", folder_name)
new_folder_path <- file.path(output_folder, clean_folder_name)
dir.create(new_folder_path, showWarnings = FALSE)
#### 3.k split the ap supply out per customer ----
# Get unique values of NAME_1
unique_names <- unique(billing_doc_output$NAME_1)
# Loop through each unique NAME_1 value
for (name in unique_names) {
# Subset data frame for current NAME_1 value
subset_data <- billing_doc_output[billing_doc_output$NAME_1 == name, ]
# Reorder the columns in final_output
subset_data <- subset_data[, desired_order]
# Replace invalid characters in name
clean_name <- gsub("[^A-Za-z0-9._-]", "_", name)
# Generate file name with folder path
file_name <- file.path(new_folder_path, paste0("ap_post_supply_", predefined_text, "_", clean_name, ".csv"))
# Write subset to CSV
write.csv(subset_data, file = file_name, row.names = FALSE)
}
#### 3.l create the ap post supply consolidated ----
output_folder <- file.path(getwd(), paste0("output_billing_dates_", predefined_text))
if (!file.exists(output_folder)) {
dir.create(output_folder, recursive = TRUE)
}
file_name <- paste0("ap_post_supply_consolidated_", predefined_text, ".csv")
full_file_path <- file.path(output_folder, file_name)
write.csv(ap_post_supply, file = full_file_path, row.names = FALSE)
###### Section 4.a Summary calculations created ----
# just the custo and description
summary_by_custo_&_description <- billing_doc_output %>%
###### Section 4.a Summary calculations created ----
# just the custo and description
summary_by_custo_description <- billing_doc_output %>%
filter(!(DESCRIPTION %in% c("AP Parcels Domestic Fuel Surcharge",
"AP Security Mgt Charge",
"AP Parcels Domestic Fuel Surchg Tax Free",
"AP Security Mgt Charge Tax Free",
"STC Parcels Domestic Fuel Surcharge",
"Over Maximum Limits Fee"))) %>%
group_by(NAME_1, DESCRIPTION) %>%
summarize(
count = n(),
sum_of_AMOUNT.INCL.TAX = sum(AMOUNT.INCL.TAX, na.rm = TRUE),
sum_of_base_charge_incgst = sum(base_charge_incgst, na.rm = TRUE),
sum_of_AMOUNT.EXCL.TAX = sum(AMOUNT.EXCL.TAX, na.rm = TRUE),
sum_of_base_charge_exgst = sum(base_charge_exgst, na.rm = TRUE),
sum_of_uplift_figure_exgst = sum(uplift_figure_exgst, na.rm = TRUE),
sum_of_charge_to_custo_exgst = sum(charge_to_custo_exgst, na.rm = TRUE),
sum_of_FUEL.SURCHARGE.. = sum(FUEL.SURCHARGE.., na.rm = TRUE),
sum_of_fuel_surcharge = sum(fuel_surcharge, na.rm = TRUE),
sum_of_fuel_surcharge_uplifted = sum(fuel_surcharge_uplifted, na.rm = TRUE),
sum_of_SMC.FEE = sum(SMC.FEE, na.rm = TRUE),
sum_of_sec_mng_chrg = sum(sec_mng_chrg, na.rm = TRUE),
sum_of_sec_mng_chrg_uplifted= sum(sec_mng_chrg_uplifted, na.rm = TRUE),
#    sum_of_OVER.MAX.LIMITS.FEE = sum(OVER.MAX.LIMITS.FEE, na.rm = TRUE),
sum_of_over_max_limits_fee = sum(over_max_limits_fee, na.rm = TRUE)
)
output_folder <- file.path(getwd(), paste0("output_billing_dates_", predefined_text))
if (!file.exists(output_folder)) {
dir.create(output_folder, recursive = TRUE)
}
file_name <- paste0("summary_by_custo_description_", predefined_text, ".csv")
full_file_path <- file.path(output_folder, file_name)
write.csv(summary_by_custo_description, file = full_file_path, row.names = FALSE)
View(summary_by_custo_description)
#just the description
summary_by_description <- billing_doc_output %>%
filter(!(DESCRIPTION %in% c("AP Parcels Domestic Fuel Surcharge",
"AP Security Mgt Charge",
"AP Parcels Domestic Fuel Surchg Tax Free",
"AP Security Mgt Charge Tax Free",
"STC Parcels Domestic Fuel Surcharge",
"Over Maximum Limits Fee"))) %>%
group_by(DESCRIPTION) %>%
summarize(
count = n(),
sum_of_AMOUNT.INCL.TAX = sum(AMOUNT.INCL.TAX, na.rm = TRUE),
sum_of_base_charge_incgst = sum(base_charge_incgst, na.rm = TRUE),
sum_of_AMOUNT.EXCL.TAX = sum(AMOUNT.EXCL.TAX, na.rm = TRUE),
sum_of_base_charge_exgst = sum(base_charge_exgst, na.rm = TRUE),
sum_of_uplift_figure_exgst = sum(uplift_figure_exgst, na.rm = TRUE),
sum_of_charge_to_custo_exgst = sum(charge_to_custo_exgst, na.rm = TRUE),
sum_of_FUEL.SURCHARGE.. = sum(FUEL.SURCHARGE.., na.rm = TRUE),
sum_of_fuel_surcharge = sum(fuel_surcharge, na.rm = TRUE),
sum_of_fuel_surcharge_uplifted = sum(fuel_surcharge_uplifted, na.rm = TRUE),
sum_of_SMC.FEE = sum(SMC.FEE, na.rm = TRUE),
sum_of_sec_mng_chrg = sum(sec_mng_chrg, na.rm = TRUE),
sum_of_sec_mng_chrg_uplifted= sum(sec_mng_chrg_uplifted, na.rm = TRUE),
#    sum_of_OVER.MAX.LIMITS.FEE = sum(OVER.MAX.LIMITS.FEE, na.rm = TRUE),
sum_of_over_max_limits_fee = sum(over_max_limits_fee, na.rm = TRUE)
)
output_folder <- file.path(getwd(), paste0("output_billing_dates_", predefined_text))
if (!file.exists(output_folder)) {
dir.create(output_folder, recursive = TRUE)
}
file_name <- paste0("summary_by_description_", predefined_text, ".csv")
full_file_path <- file.path(output_folder, file_name)
write.csv(summary_by_description, file = full_file_path, row.names = FALSE)
shiny::runApp('AP_supply_billing_tool')
runApp('AP_supply_billing_tool')
runApp('AP_supply_billing_tool')
install.packages("dplyr")
runApp('AP_supply_billing_tool')
runApp('AP_supply_billing_tool')
runApp('AP_supply_billing_tool')
runApp('AP_supply_billing_tool')
#bill = read.csv("billing_docs/1013016084-6214851349184512.csv", head=TRUE, sep=",")  # 01 - 16 feb
bill = read.csv("billing_docs/1013048181-6514511150317568.csv", head=TRUE, sep=",")  # 17 - 28 feb
#bill = read.csv("billing_docs/1013085979-5806754721955840.csv", head=TRUE, sep=",")  # 01 - 16 Mar
#bill = read.csv("billing_docs/1013111472-5847093054799872.csv", head=TRUE, sep=",")  # 17 - 31 Mar
#bill = read.csv("billing_docs/1013156007-5729374082957312.csv", head=TRUE, sep=",")  # 01 - 15 April
#bill = read.csv("billing_docs/1013168047-5072493127663616.csv", head=TRUE, sep=",")  # 16 - 30 April;
#### 1.c billing date extracted for title generation
# Get the min and max dates the bill covers
bill$BILLING.DATE <- as.Date(as.character(bill$BILLING.DATE), format = "%Y%m%d")
min_date <- min(bill$BILLING.DATE, na.rm = TRUE)
max_date <- max(bill$BILLING.DATE, na.rm = TRUE)
predefined_text <- paste(  "to", format(max_date, "%Y-%m-%d"))
#### 1.c billing date extracted for title generation
# Get the min and max dates the bill covers
bill$BILLING.DATE <- as.Date(as.character(bill$BILLING.DATE), format = "%Y%m%d")
min_date <- min(bill$BILLING.DATE, na.rm = TRUE)
max_date <- max(bill$BILLING.DATE, na.rm = TRUE)
predefined_text <- paste(  "pe", format(max_date, "%Y-%m-%d"))
# Get the min and max dates the bill covers
bill$BILLING.DATE <- as.Date(as.character(bill$BILLING.DATE), format = "%Y%m%d")
min_date <- min(bill$BILLING.DATE, na.rm = TRUE)
max_date <- max(bill$BILLING.DATE, na.rm = TRUE)
predefined_text <- paste(  "to", format(max_date, "%Y-%m-%d"))
#bill = read.csv("billing_docs/1013016084-6214851349184512.csv", head=TRUE, sep=",")  # 01 - 16 feb
bill = read.csv("billing_docs/1013048181-6514511150317568.csv", head=TRUE, sep=",")  # 17 - 28 feb
#bill = read.csv("billing_docs/1013085979-5806754721955840.csv", head=TRUE, sep=",")  # 01 - 16 Mar
#bill = read.csv("billing_docs/1013111472-5847093054799872.csv", head=TRUE, sep=",")  # 17 - 31 Mar
#bill = read.csv("billing_docs/1013156007-5729374082957312.csv", head=TRUE, sep=",")  # 01 - 15 April
#bill = read.csv("billing_docs/1013168047-5072493127663616.csv", head=TRUE, sep=",")  # 16 - 30 April;
#### 1.c billing date extracted for title generation
# Get the min and max dates the bill covers
bill$BILLING.DATE <- as.Date(as.character(bill$BILLING.DATE), format = "%Y%m%d")
min_date <- min(bill$BILLING.DATE, na.rm = TRUE)
max_date <- max(bill$BILLING.DATE, na.rm = TRUE)
predefined_text <- paste(  "to", format(max_date, "%Y-%m-%d"))
#### 1.c billing date extracted for title generation
# Get the min and max dates the bill covers
bill$BILLING.DATE <- as.Date(as.character(bill$BILLING.DATE), format = "%Y%m%d")
min_date <- min(bill$BILLING.DATE, na.rm = TRUE)
max_date <- max(bill$BILLING.DATE, na.rm = TRUE)
predefined_text <- paste(  "PE", format(max_date, "%Y-%m-%d"))
# pre feb base rates. Left in for pulling comparison calcs
#cz_pre_feb_eparcel_regular_ex_mel = read.csv("reference_data/cz_pre_feb_eparcel_regular_ex_mel.csv", head=TRUE, row.names = 1,  sep=",")
#cz_pre_feb_eparcel_express_ex_mel = read.csv("reference_data/cz_pre_feb_eparcel_express_ex_mel.csv", head=TRUE, row.names = 1,  sep=",")
#cz_pre_feb_eparcel_regular_ex_syd = read.csv("reference_data/cz_pre_feb_eparcel_regular_ex_syd.csv", head=TRUE, row.names = 1,  sep=",")
#cz_pre_feb_eparcel_express_ex_syd = read.csv("reference_data/cz_pre_feb_eparcel_express_ex_syd.csv", head=TRUE, row.names = 1,  sep=",")
#### 1.d load the reference data
#this could be changed to extract some a shared drive
cz_post_feb_eparcel_regular_ex_mel = read.csv("reference_data/cz_post_feb_eparcel_regular_ex_mel.csv", head=TRUE, row.names = 1,  sep=",")
cz_post_feb_eparcel_express_ex_mel = read.csv("reference_data/cz_post_feb_eparcel_express_ex_mel.csv", head=TRUE, row.names = 1,  sep=",")
cz_post_feb_eparcel_regular_ex_syd = read.csv("reference_data/cz_post_feb_eparcel_regular_ex_syd.csv", head=TRUE, row.names = 1,  sep=",")
cz_post_feb_eparcel_express_ex_syd = read.csv("reference_data/cz_post_feb_eparcel_express_ex_syd.csv", head=TRUE, row.names = 1,  sep=",")
cz_post_feb_eparcel_express_ex_syd = read.csv("reference_data/cz_post_feb_eparcel_express_ex_syd.csv", head=TRUE, row.names = 1,  sep=",")
cz_post_feb_eparcel_wine_ex_mel = read.csv("reference_data/cz_post_feb_eparcel_wine_ex_mel.csv", head=TRUE, row.names = 1,  sep=",")
cz_post_feb_eparcel_wine_ex_syd = read.csv("reference_data/cz_post_feb_eparcel_wine_ex_syd.csv", head=TRUE, row.names = 1,  sep=",")
cz_post_feb_eparcel_international_express_merch = read.csv("reference_data/cz_post_feb_eparcel_international_express_merch.csv", head=TRUE, row.names = 1,  sep=",")
cz_post_feb_eparcel_international_standard = read.csv("reference_data/cz_post_feb_eparcel_international_standard.csv", head=TRUE, row.names = 1,  sep=",")
# custo mark up
customer_uplift_march_24 = read.csv("reference_data/customer_uplift_march_24.csv", head=TRUE, row.names = 1,  sep=",")
#custo codes
estore_custo_codes = read.csv("reference_data/estore_custo_codes.csv", head=TRUE, sep=",")
#### 1.e customer code ----
# Function to extract letters before the first "-"
extract_letters <- function(text) {
split_text <- strsplit(as.character(text), " ")[[1]]
return(trimws(split_text[1]))
}
# Create a new column in bill to store the corresponding values from DF2
bill$customer_code <- NA
# Loop through each row in bill
for (i in 1:nrow(bill)) {
# Get the trading name from bill$NAME_1
trading_name <- bill$NAME_1[i]
# Find the corresponding row index in DF2 where trading_name matches
match_index <- which(estore_custo_codes$trading_name == trading_name)
# If a match is found, assign the corresponding value from DF2 to bill
if (length(match_index) > 0) {
bill$customer_code[i] <- estore_custo_codes$eStore_code[match_index]
} else {
# Handle cases where no match is found
# Extract letters before the "-" in bill$NAME_1
letters_before_dash <- substr(trading_name, 1, regexpr("-", trading_name) - 1)
bill$customer_code[i] <- ifelse(letters_before_dash != "", letters_before_dash, "custo code not found")
}
}
# Apply the extract_letters function to customer_code where necessary
bill$customer_code2 <- sapply(bill$customer_code, function(code) {
if (code == "custo code not found") {
extract_letters(bill$NAME_1[i])
} else {
extract_letters(code)
}
})
#### 1.f remove the summary lines and cut the dataset down ----
bill_cut1 <- bill[!grepl("charge|surcharge|admin|fuel", bill$DESCRIPTION, ignore.case = TRUE), ]
#bill_cut1 <- bill
#cutting the dataset down to just the metrics we need for ALL of the basic calculations
bill_cut1 <-  bill_cut1[,  c("REGION", "RECEIVING.COUNTRY", "customer_code", "customer_code2", "CUSTOMER", "NAME_1", "NAME_2", "NAME_3", "DESCRIPTION", "BILLING.DOC", "SERVICE.DATE", "TO.ADDRESS", "CONSIGNMENT.ID", "ARTICLE.ID",
"BILLED.LENGTH", "BILLED.WIDTH", "BILLED.HEIGHT", "CUBIC.WEIGHT", "BILLED.WEIGHT", "ACTUAL.WEIGHT", "CHARGE.ZONE", "FROM.STATE", "AVG..UNIT.PRICE" ,"AMOUNT.INCL.TAX", "AMOUNT.EXCL.TAX", "DECLARED.WEIGHT")]
#### 1.g create the service column from the description to reference against rate cards
bill_cut1$service <- ifelse(bill_cut1$REGION == "VIC" & bill_cut1$DESCRIPTION == "Parcel Post with Signature", "Regular.VIC",
ifelse(bill_cut1$REGION == "VIC" & bill_cut1$DESCRIPTION == "Express Post with Signature", "Express.VIC",
ifelse(bill_cut1$REGION == "NSW" & bill_cut1$DESCRIPTION == "Parcel Post with Signature", "Regular.NSW",
ifelse(bill_cut1$REGION == "NSW" & bill_cut1$DESCRIPTION == "Express Post with Signature", "Express.NSW",
ifelse(bill_cut1$DESCRIPTION == "Express Post Parcels (BYO up to 5kg)", "EPP_fivekg",
ifelse(bill_cut1$DESCRIPTION == "eParcel Return To Sender", "ep_return_to_sender",
ifelse(bill_cut1$DESCRIPTION == "Express Post eparcel returns", "exp_eparcel_returns",
ifelse(bill_cut1$DESCRIPTION == "eParcel Post Return", "reg_eparcel_returns",
ifelse(bill_cut1$DESCRIPTION == "eParcel Call For Return", "reg_ep_call_for_return",
ifelse(bill_cut1$REGION == "VIC" & bill_cut1$DESCRIPTION == "EPARCEL WINE STD", "Wine.VIC",
ifelse(bill_cut1$REGION == "NSW" & bill_cut1$DESCRIPTION == "EPARCEL WINE STD", "Wine.NSW",
ifelse(bill_cut1$DESCRIPTION == "PACK AND TRACK INTERNATIONAL", "International",
ifelse(bill_cut1$DESCRIPTION == "Express Courier International (eParcel)", "International",
ifelse(bill_cut1$DESCRIPTION == "APGL NZ Express w/Signature", "APGL",
ifelse(bill_cut1$DESCRIPTION %in% c("On Demand Tonight", "On Demand Afternoon"), "OnDemand",
NA)))))))))))))))
#### 1.h create the uplift column from the description to reference against uplift card ----
bill_cut1$uplift <- ifelse(bill_cut1$DESCRIPTION == "Express Post Parcels (BYO up to 5kg)", "EPP_fivekg",
ifelse(bill_cut1$DESCRIPTION %in% c("eParcel Return To Sender", "eParcel Post Return", "eParcel Call For Return"),
ifelse(bill_cut1$REGION == "VIC", "Regular.VIC",
ifelse(bill_cut1$REGION == "NSW", "Regular.NSW", NA)
),
ifelse(bill_cut1$DESCRIPTION == "Express Post eparcel returns",
ifelse(bill_cut1$REGION == "VIC", "Express.VIC",
ifelse(bill_cut1$REGION == "NSW", "Express.NSW", NA)
),
ifelse(bill_cut1$DESCRIPTION == "EPARCEL WINE STD",
ifelse(bill_cut1$REGION == "VIC", "Wine.VIC",
ifelse(bill_cut1$REGION == "NSW", "Wine.NSW", NA)
),
ifelse(bill_cut1$DESCRIPTION %in% c("PACK AND TRACK INTERNATIONAL", "Express Courier International (eParcel)", "International Returns Express"), "International",
ifelse(bill_cut1$REGION == "VIC",
ifelse(bill_cut1$DESCRIPTION == "Parcel Post with Signature", "Regular.VIC",
ifelse(bill_cut1$DESCRIPTION == "Express Post with Signature", "Express.VIC", NA)),
ifelse(bill_cut1$REGION == "NSW",
ifelse(bill_cut1$DESCRIPTION == "Parcel Post with Signature", "Regular.NSW",
ifelse(bill_cut1$DESCRIPTION == "Express Post with Signature", "Express.NSW", NA)), NA
)))))))
# Additional Conditions (no new rates for these)
bill_cut1$uplift <- ifelse(bill_cut1$DESCRIPTION %in% c("On Demand Tonight", "On Demand Afternoon"), "OnDemand", bill_cut1$uplift)
bill_cut1$uplift <- ifelse(bill_cut1$DESCRIPTION == "APGL NZ Express w/Signature", "APGL", bill_cut1$uplift)
#### 1.i create a col to determine if its GST free ----
# the NZ here represents all og APGL
is_gst_free <- function(zone) {
ifelse(zone %in% c("NF", "W4", "AAT", "Z1", "Z2", "Z3", "Z4", "Z5", "Z6", "Z7", "Z8", "Z9", "NZ"), "Yes", "No")
}
# Apply the function to create the new column
bill_cut1$is_gst_free_zone <- is_gst_free(bill_cut1$CHARGE.ZONE)
###### Section 2. Base charges and uplift applied ####
#All services are and charges are calculated in this script #####
#### 2.a Change variable name ----
# Changing name so  cleaniness purposes
bill_cut_a <-  bill_cut1
#### 2.b calculate Cubic size ----
factor <- 250  # Change this to your desired factor
cubic_size <- bill_cut_a$BILLED.HEIGHT * bill_cut_a$BILLED.LENGTH * bill_cut_a$BILLED.WIDTH
bill_cut_a$cubic_size <- cubic_size
bill_cut_a$cubic_weight <- cubic_size * factor
bill_cut_a <- mutate(bill_cut_a,
max_weight = ifelse(service == 'International',
ifelse(BILLED.WEIGHT == 0, DECLARED.WEIGHT, BILLED.WEIGHT),
ifelse(cubic_weight == 0 & BILLED.WEIGHT == 0,
DECLARED.WEIGHT,
pmax(cubic_weight, BILLED.WEIGHT))))
#### 2.c declare the charges (user inputs) ----
#fuel charge_ex_gst has to be calculated from the exgst charge value
gst <- 0.1
fuel_surcharge_pct <- (as.numeric(input$fuel_surcharge)/100)  #### 1/1 of uder inputs
runApp('AP_supply_billing_tool')
runApp('AP_supply_billing_tool')
runApp('AP_supply_billing_tool')
runApp('AP_supply_billing_tool')
runApp('AP_supply_billing_tool')
