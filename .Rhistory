if (length(index) == 0) {
NA
} else {
index
}
}))
output_b_2 <-cbind(output_b1, (cbind(row_index_max, col_index_max)))
# query new base charge rate
# Function to extract values from charge zone dataset based on indices
extract_charge_value_max_incgst <- function(row_index_max, col_index_max) {
charge_value <- cz_post_feb_eparcel_express_ex_mel[row_index_max, col_index_max]
return(charge_value)
}
output_b_2$charge_value_max_incgst <- mapply(extract_charge_value_max_incgst, output_b_2$row_index_max, output_b_2$col_index_max)
# Function to calculate charge based on charge_value_max_incgst and Per_Kg_#. Also does the calc if  weight_category_max == "Basic"
calculate_final_charge <- function(charge_value_max_incgst, weight_category_max, max_weight, row_index_max) {
if (weight_category_max == "Basic") {
per_kg_value <- cz_post_feb_eparcel_express_ex_mel[row_index_max, "Per_Kg"]
return(charge_value_max_incgst + (per_kg_value * (ceiling(max_weight))))
} else {
return(charge_value_max_incgst)
}
}
output_b_2$base_charge_incgst <- mapply(calculate_final_charge, output_b_2$charge_value_max_incgst, output_b_2$weight_category_max, output_b_2$max_weight, output_b_2$row_index_max)
#### Base charge for Regular.NSW  ####
output_c1 <- subset(output_a, uplift_service %in% c("Regular.NSW"))
#Determine the indexes to use to query the new base charge zone sheet
# find the row and column number to reference against z_c
col_name_max<- as.character(output_c1$weight_category_max)
col_index_max <- unlist(lapply(output_c1$weight_category_max, function(col_name_max) {
which(colnames(cz_post_feb_eparcel_regular_ex_syd ) == col_name_max)
}))
row_name_max<- as.character(output_c1$CHARGE.ZONE)
row_index_max <- unlist(lapply(row_name_max, function(row_name_max) {
index <- which(rownames(cz_post_feb_eparcel_regular_ex_syd ) == row_name_max)
if (length(index) == 0) {
NA
} else {
index
}
}))
output_c_2 <-cbind(output_c1, (cbind(row_index_max, col_index_max)))
# query new base charge rate
# Function to extract values from charge zone dataset based on indices
extract_charge_value_max_incgst <- function(row_index_max, col_index_max) {
charge_value <- cz_post_feb_eparcel_regular_ex_syd [row_index_max, col_index_max]
return(charge_value)
}
output_c_2$charge_value_max_incgst <- mapply(extract_charge_value_max_incgst, output_c_2$row_index_max, output_c_2$col_index_max)
# Function to calculate charge based on charge_value_max_incgst and Per_Kg_#. Also does the calc if  weight_category_max == "Basic"
calculate_final_charge <- function(charge_value_max_incgst, weight_category_max, max_weight, row_index_max) {
if (weight_category_max == "Basic") {
per_kg_value <- cz_post_feb_eparcel_regular_ex_syd [row_index_max, "Per_Kg"]
return(charge_value_max_incgst + (per_kg_value * (ceiling(max_weight))))
} else {
return(charge_value_max_incgst)
}
}
output_c_2$base_charge_incgst <- mapply(calculate_final_charge, output_c_2$charge_value_max_incgst, output_c_2$weight_category_max, output_c_2$max_weight, output_c_2$row_index_max)
#### Base charge for Express.NSW ####
output_d1 <- subset(output_a, uplift_service %in% c("Express.NSW"))
#Determine the indexes to use to query the new base charge zone sheet
# find the row and column number to reference against z_c
col_name_max<- as.character(output_d1$weight_category_max)
col_index_max <- unlist(lapply(output_d1$weight_category_max, function(col_name_max) {
which(colnames(cz_post_feb_eparcel_express_ex_syd) == col_name_max)
}))
row_name_max<- as.character(output_d1$CHARGE.ZONE)
row_index_max <- unlist(lapply(row_name_max, function(row_name_max) {
index <- which(rownames(cz_post_feb_eparcel_express_ex_syd) == row_name_max)
if (length(index) == 0) {
NA
} else {
index
}
}))
output_d_2 <-cbind(output_d1, (cbind(row_index_max, col_index_max)))
# query new base charge rate
# Function to extract values from charge zone dataset based on indices
extract_charge_value_max_incgst <- function(row_index_max, col_index_max) {
charge_value <- cz_post_feb_eparcel_express_ex_syd[row_index_max, col_index_max]
return(charge_value)
}
output_d_2$charge_value_max_incgst <- mapply(extract_charge_value_max_incgst, output_d_2$row_index_max, output_d_2$col_index_max)
# Function to calculate charge based on charge_value_max_incgst and Per_Kg_#. Also does the calc if  weight_category_max == "Basic"
calculate_final_charge <- function(charge_value_max_incgst, weight_category_max, max_weight, row_index_max) {
if (weight_category_max == "Basic") {
per_kg_value <- cz_post_feb_eparcel_express_ex_syd[row_index_max, "Per_Kg"]
return(charge_value_max_incgst + (per_kg_value * (ceiling(max_weight))))
} else {
return(charge_value_max_incgst)
}
}
output_d_2$base_charge_incgst <- mapply(calculate_final_charge, output_d_2$charge_value_max_incgst, output_d_2$weight_category_max, output_d_2$max_weight, output_d_2$row_index_max)
#### Base charge for Express Post Parcels (BYO up to 5kg) ####
# to be tested when I can bring this in
#output_e <- subset(output_a, uplift_service %in% c("EPP_fivekg"))
#output_e$base_charge_incgst <- ifelse(output_e$DESCRIPTION == "Express Post Parcels (BYO up to 5kg)",
#                                                ex_pp_byo_up_to_5kg,
#                                                NA)
#### Base charge for eparcel return to sender, Express Post eparcel returns, eParcel Post Return (Reg)  ####
# Function to subset data based on uplift_service and perform operations
subset_and_operate <- function(data, service, fee) {
subset_data <- subset(data, uplift_service %in% service)
if (nrow(subset_data) > 0) {
subset_data$row_index_max <- NA
subset_data$col_index_max <- NA
subset_data$charge_value_max_incgst <- NA
subset_data$base_charge_incgst <- fee
return(subset_data)
} else {
return(NULL)
}
}
# eparcel return to sender
output_f <- subset_and_operate(output_a, "ep_return_to_sender", ep_return_to_sender_fee)
# Express Post eparcel returns
output_g <- subset_and_operate(output_a, "exp_eparcel_returns", exp_eparcel_returns_fee)
# eParcel Post Return (Reg)
output_h <- subset_and_operate(output_a, c("reg_eparcel_returns", "reg_ep_call_for_return"), reg_eparcel_returns_fee)
#### base charge for eparcel_wine.VIC ####
# cut the dataset down to correct uplift service
output_i1 <- subset(output_a, uplift_service %in% c("Wine.VIC"))
#Determine the indexes to use to query the new base charge zone sheet
# find the row and column number to reference against z_c
col_name_max<- as.character(output_i1$weight_category_max)
col_index_max <- unlist(lapply(output_i1$weight_category_max, function(col_name_max) {
which(colnames(cz_post_feb_eparcel_wine_ex_mel) == col_name_max)
}))
row_name_max<- as.character(output_i1$CHARGE.ZONE)
row_index_max <- unlist(lapply(row_name_max, function(row_name_max) {
index <- which(rownames(cz_post_feb_eparcel_wine_ex_mel) == row_name_max)
if (length(index) == 0) {
NA
} else {
index
}
}))
output_i_2 <-cbind(output_i1, (cbind(row_index_max, col_index_max)))
# query new base charge rate
# Function to extract values from charge zone dataset based on indices
extract_charge_value_max_incgst <- function(row_index_max, col_index_max) {
charge_value <- cz_post_feb_eparcel_wine_ex_mel[row_index_max, col_index_max]
return(charge_value)
}
output_i_2$charge_value_max_incgst <- mapply(extract_charge_value_max_incgst, output_i_2$row_index_max, output_i_2$col_index_max)
output_i_2$base_charge_incgst <- output_i_2$charge_value_max_incgst
#### base charge for eparcel_wine.NSW #####
# cut the dataset down to correct uplift service
output_j1 <- subset(output_a, uplift_service %in% c("Wine.NSW"))
#Determine the indexes to use to query the new base charge zone sheet
# find the row and column number to reference against z_c
col_name_max<- as.character(output_j1$weight_category_max)
col_index_max <- unlist(lapply(output_j1$weight_category_max, function(col_name_max) {
which(colnames(cz_post_feb_eparcel_wine_ex_syd) == col_name_max)
}))
row_name_max<- as.character(output_j1$CHARGE.ZONE)
row_index_max <- unlist(lapply(row_name_max, function(row_name_max) {
index <- which(rownames(cz_post_feb_eparcel_wine_ex_syd) == row_name_max)
if (length(index) == 0) {
NA
} else {
index
}
}))
output_j_2 <-cbind(output_j1, (cbind(row_index_max, col_index_max)))
# query new base charge rate
# Function to extract values from charge zone dataset based on indices
extract_charge_value_max_incgst <- function(row_index_max, col_index_max) {
charge_value <- cz_post_feb_eparcel_wine_ex_syd[row_index_max, col_index_max]
return(charge_value)
}
output_j_2$charge_value_max_incgst <- mapply(extract_charge_value_max_incgst, output_j_2$row_index_max, output_j_2$col_index_max)
output_j_2$base_charge_incgst <- output_j_2$charge_value_max_incgst
#### Base charge for PACK AND TRACK INTERNATIONAL ####
# have to return to international as a whole to give us the logic to determine the correct per KG multiplication
# using the description here
output_l1 <- subset(output_a, DESCRIPTION  %in% c("PACK AND TRACK INTERNATIONAL"))
#Determine the indexes to use to query the new base charge zone sheet
# find the row and column number to reference against z_c
col_name_max<- as.character(output_l1$weight_category_max)
col_index_max <- unlist(lapply(output_l1$weight_category_max, function(col_name_max) {
which(colnames(cz_post_feb_eparcel_international_standard) == col_name_max)
}))
row_name_max<- as.character(output_l1$CHARGE.ZONE)
row_index_max <- unlist(lapply(row_name_max, function(row_name_max) {
index <- which(rownames(cz_post_feb_eparcel_international_standard) == row_name_max)
if (length(index) == 0) {
NA
} else {
index
}
}))
output_l_2 <-cbind(output_l1, (cbind(row_index_max, col_index_max)))
sapply(output_l_2, class)
# query new base charge rate
# Function to extract values from charge zone dataset based on indices
extract_charge_value_max_incgst <- function(row_index_max, col_index_max) {
charge_value <- cz_post_feb_eparcel_international_standard[row_index_max, col_index_max]
return(as.numeric(charge_value))
}
output_l_2$charge_value_max_incgst <- mapply(extract_charge_value_max_incgst, output_l_2$row_index_max, output_l_2$col_index_max)
sapply(output_l_2, class)
# Function to calculate charge based on charge_value_max_incgst and Per_Kg_#. Also does the calc if  weight_category_max == "X2.01kg_to_20kg"
#calculate_final_charge <- function(charge_value_max_incgst, weight_category_max, max_weight, row_index_max) {
#  if (weight_category_max == "X2.01kg_to_20kg") {
#    per_kg_value <- cz_post_feb_eparcel_international_standard[row_index_max, "Per_Kg_2"]
#   return(charge_value_max_incgst + (per_kg_value * (max_weight)))
#  } else {
#    return(charge_value_max_incgst)
#  }
#}
calculate_final_charge <- function(charge_value_max_incgst, weight_category_max, max_weight, row_index_max) {
if (weight_category_max == "Above_20kg_for_international") {
return(0)
}
else if (weight_category_max == "X2.01kg_to_20kg") {
per_kg_value <- cz_post_feb_eparcel_international_standard[row_index_max, "Per_Kg_2"]
return(charge_value_max_incgst + (per_kg_value * max_weight))
}
else if (weight_category_max %in% c("Up_to_500g", "X501g_to_1kg", "X1.01kg_to_2kg")) {
per_kg_value <- cz_post_feb_eparcel_international_standard[row_index_max, "Per_Kg_1"]
return(charge_value_max_incgst + (per_kg_value * max_weight))
}
else {
return(charge_value_max_incgst)
}
}
output_l_2$base_charge_incgst <- mapply(calculate_final_charge, output_l_2$charge_value_max_incgst, output_l_2$weight_category_max, output_l_2$max_weight, output_l_2$row_index_max)
sapply(output_l_2, class)
#### Base charge fo Express Courier International (eParcel) ####
# using the description here
output_k1 <- subset(output_a, DESCRIPTION  %in% c("Express Courier International (eParcel)"))
#Determine the indexes to use to query the new base charge zone sheet
# find the row and column number to reference against z_c
col_name_max<- as.character(output_k1$weight_category_max)
col_index_max <- unlist(lapply(output_k1$weight_category_max, function(col_name_max) {
which(colnames(cz_post_feb_eparcel_international_express_merch) == col_name_max)
}))
row_name_max<- as.character(output_k1$CHARGE.ZONE)
row_index_max <- unlist(lapply(row_name_max, function(row_name_max) {
index <- which(rownames(cz_post_feb_eparcel_international_express_merch) == row_name_max)
if (length(index) == 0) {
NA
} else {
index
}
}))
output_k_2 <-cbind(output_k1, (cbind(row_index_max, col_index_max)))
sapply(output_k_2, class)
# query new base charge rate
# Function to extract values from charge zone dataset based on indices
extract_charge_value_max_incgst <- function(row_index_max, col_index_max) {
charge_value <- cz_post_feb_eparcel_international_express_merch[row_index_max, col_index_max]
return(charge_value)
}
output_k_2$charge_value_max_incgst <- mapply(extract_charge_value_max_incgst, output_k_2$row_index_max, output_k_2$col_index_max)
# Function to calculate charge based on charge_value_max_incgst and Per_Kg_#. Also does the calc if  weight_category_max == "X2.01kg_to_20kg"
calculate_final_charge <- function(charge_value_max_incgst, weight_category_max, max_weight, row_index_max) {
if (weight_category_max == "X2.01kg_to_20kg") {
per_kg_value <- cz_post_feb_eparcel_international_express_merch[row_index_max, "Per_Kg"]
return(charge_value_max_incgst + (per_kg_value * (max_weight)))
} else {
return(charge_value_max_incgst)
}
}
output_k_2$base_charge_incgst <- mapply(calculate_final_charge, output_k_2$charge_value_max_incgst, output_k_2$weight_category_max, output_k_2$max_weight, output_k_2$row_index_max)
write.csv(output_k_2, file = "output_k_2.csv")
#### combine all DFs together ######
output_all_services  <- rbind(output_a_2, output_b_2, output_c_2, output_d_2, output_f, output_g, output_h, output_i_2, output_j_2, output_l_2, output_k_2)
#write.csv(output_all_services, file = "output_all_services.csv")
#### additional mapping ####
# get charge_value_exgst
#output_all_services <- output_all_services %>%
#  arrange(CONSIGNMENT.ID, TO.ADDRESS) %>%
# group_by(CONSIGNMENT.ID, TO.ADDRESS) %>%
# mutate(
#    new_base_charge_incgst = base_charge_incgst - 1.50 * (row_number() - 1)
#  ) %>%
#  ungroup()
output_all_services$base_charge_exgst <- ifelse(output_all_services$is_gst_free_zone == 'No',
(output_all_services$base_charge_incgst/ 110) * 100,
output_all_services$base_charge_incgst)
write.csv(output_all_services, file = "output_all_services.csv")
# find the tax amount
output_all_services$base_charge_tax <- output_all_services$base_charge_incgst - output_all_services$base_charge_exgst
# calculate fuel surcharge based on ex gst
output_all_services$fuel_surcharge <- output_all_services$base_charge_exgst * fuel_surcharge_pct
output_all_services$fuel_gst <- output_all_services$fuel_surcharge  * gst
# calculate security management fee
output_all_services$sec_mng_chrg <- ifelse(output_all_services$DESCRIPTION == "Express Post with Signature",
output_all_services$base_charge_exgst * sec_mng_chrg_pct,
NA)
output_all_services$sec_mng_gst <- output_all_services$sec_mng_chrg * gst
#write.csv(output_all_services, file = "output_all_services.csv")
##### multiply by customer uplift   ####
# first step is to find the indices
# Initialize vectors to store results
col_index_uplift <- numeric(nrow(output_all_services))
row_index_uplift <- numeric(nrow(output_all_services))
# Iterate over each row
for (i in 1:nrow(output_all_services)) {
if (output_all_services$DESCRIPTION[i] %in% c("Parcel Post with Signature", "Express Post with Signature", "EPARCEL WINE STD", "Express Courier International (eParcel)")) {
# For rows with specified DESCRIPTION, find column and row indices
col_name_uplift <- as.character(output_all_services$uplift_service[i])
col_index_uplift[i] <- which(colnames(customer_uplift_march_24) == col_name_uplift)
row_name_uplift <- as.character(output_all_services$customer_code[i])
row_index <- which(rownames(customer_uplift_march_24) == row_name_uplift)
# Check if the row index exists, otherwise assign NA
if (length(row_index) == 0) {
row_index_uplift[i] <- NA
} else {
row_index_uplift[i] <- row_index
}
} else {
# For other rows, assign NA to indices
col_index_uplift[i] <- NA
row_index_uplift[i] <- NA
}
}
#, "EPARCEL WINE STD", "Express Courier International (eParcel)"
############
output_all_services_2 <-cbind(output_all_services, (cbind(row_index_uplift, col_index_uplift)))
#write.csv(output_all_services_2, file = "output_all_services_2.csv")
# query uplift sheet to find uplift % ####
# Function to extract values from charge zone dataset based on indices
#extract_charge_value_uplift<- function(row_index_uplift, col_index_uplift) {
#  charge_value <- customer_uplift_march_24[row_index_uplift, col_index_uplift]
# return(charge_value)
#}
###########################
extract_charge_value_uplift <- function(row_index_uplift, col_index_uplift) {
if (is.na(row_index_uplift) || is.na(col_index_uplift)) {
return(0)
} else {
charge_value <- customer_uplift_march_24[row_index_uplift, col_index_uplift]
return(charge_value)
}
}
#################################
output_all_services_2$charge_value_uplift <- mapply(extract_charge_value_uplift, output_all_services_2$row_index_uplift, output_all_services_2$col_index_uplift)
#write.csv(output_all_services_2, file = "output_all_services_2.csv")
#### multiply base by uplift ####
# Incgst Convert charge_value_uplift to numeric, handling NA values
output_all_services_2$charge_value_uplift_numeric_incgst <- ifelse(is.na(output_all_services_2$charge_value_uplift) | is.na(output_all_services_2$base_charge_exgst),
NA,
as.numeric(sub("%", "", output_all_services_2$charge_value_uplift)))
#exgst
output_all_services_2$charge_value_uplift_numeric_exgst <- ifelse(is.na(output_all_services_2$charge_value_uplift) | is.na(output_all_services_2$base_charge_exgst),
NA,
as.numeric(sub("%", "", output_all_services_2$charge_value_uplift)))
# Incgst Convert base_charge_exgst to numeric, handling NA values
#output_all_services_2$charge_value_max_incgst_numeric <- ifelse(is.na(output_all_services_2$charge_value_uplift) | is.na(output_all_services_2$base_charge_exgst),
#                                              NA,
#                                              as.numeric(gsub("[^0-9.]", "", output_all_services_2$base_charge_exgst)))
#exgst
output_all_services_2$charge_value_max_exgst_numeric <- ifelse(is.na(output_all_services_2$charge_value_uplift) | is.na(output_all_services_2$base_charge_exgst),
NA,
as.numeric(gsub("[^0-9.]", "", output_all_services_2$base_charge_exgst)))
# Incgst Calculate the percentage of base_charge_exgst, handling NA values
#output_all_services_2$uplift_figure_incgst <- ifelse(is.na(output_all_services_2$charge_value_uplift_numeric_incgst) | is.na(output_all_services_2$charge_value_max_incgst_numeric),
#                                   NA,
#                                   (output_all_services_2$charge_value_uplift_numeric_incgst / 100) * output_all_services_2$charge_value_max_incgst_numeric)
#exgst
output_all_services_2$uplift_figure_exgst <- ifelse(is.na(output_all_services_2$charge_value_uplift_numeric_exgst) | is.na(output_all_services_2$charge_value_max_exgst_numeric),
NA,
(output_all_services_2$charge_value_uplift_numeric_exgst / 100) * output_all_services_2$charge_value_max_exgst_numeric)
#  Incgst Filter out NA and non-numeric values before performing addition
#output_all_services_2$charge_to_custo_incgst <- ifelse(is.na(output_all_services_2$charge_value_max_incgst_numeric) | is.na(output_all_services_2$uplift_figure_incgst) | !is.numeric(output_all_services_2$charge_value_max_incgst_numeric) | !is.numeric(output_all_services_2$uplift_figure_incgst),
#                                     NA,
#                                    output_all_services_2$charge_value_max_incgst_numeric + output_all_services_2$uplift_figure_incgst)
#exgst
output_all_services_2$charge_to_custo_exgst <- ifelse(is.na(output_all_services_2$charge_value_max_exgst_numeric) | is.na(output_all_services_2$uplift_figure_exgst) | !is.numeric(output_all_services_2$charge_value_max_exgst_numeric) | !is.numeric(output_all_services_2$uplift_figure_exgst),
NA,
output_all_services_2$charge_value_max_exgst_numeric + output_all_services_2$uplift_figure_exgst)
# update table name
output_all_services_2 <- output_all_services_2
#output_all_services_2 <- subset(output_all_services_2 , ARTICLE.ID %in% c('ET239232669AU'))
##### write to CSV ####
write.csv(output_all_services_2, file = "output_all_services_2.csv")
#the above is redundent
#Take what we want from the DF and put it into the input file
# Rename column in bill data frame
names(bill)[names(bill) == "ARTICLE.ID"] <- "article_id"
# Rename column in output_all_services_2 data frame
names(output_all_services_2)[names(output_all_services_2) == "ARTICLE.ID"] <- "article_id"
# Specify columns to merge from output_all_services_2
merge_cols <- c("uplift_service", "DESCRIPTION", "BILLING.DOC", "article_id", "base_charge_incgst", "base_charge_exgst", "base_charge_tax", "charge_value_uplift", "uplift_figure_exgst", "charge_to_custo_exgst", "cubic_weight", "max_weight", "CHARGE.ZONE", "fuel_surcharge", "fuel_gst", "sec_mng_chrg", "sec_mng_gst", "over_max_limits_fee", "weight_category_max")
# Select only the merge_cols from output_all_services_2
selected_output_all_services_2 <- output_all_services_2[, merge_cols]
# Merge bill and selected columns from output_all_services_2 by "article_id"
final_output <- merge(bill, selected_output_all_services_2, by = c("article_id", "BILLING.DOC", "DESCRIPTION"), all = TRUE)
# Find the position of "AVG..UNIT.PRICE" column
avg_unit_price_index <- which(names(final_output) == "AMOUNT.INCL.TAX")
# Insert new columns after "AVG..UNIT.PRICE"
final_output <- cbind(final_output[, 1:avg_unit_price_index],
final_output[, c("base_charge_incgst","base_charge_exgst", "base_charge_tax", "charge_value_uplift", "uplift_figure_exgst", "charge_to_custo_exgst")],
final_output[, (avg_unit_price_index + 1):ncol(final_output)])
# Find the position of "AVG..UNIT.PRICE" column
fuel_gst_index <- which(names(final_output) == "FUEL.GST")
# Insert new columns after "AVG..UNIT.PRICE"
final_output <- cbind(final_output[, 1:fuel_gst_index  ],
final_output[, c("fuel_surcharge" ,"fuel_gst", "sec_mng_chrg", "sec_mng_gst", "over_max_limits_fee")],
final_output[, (fuel_gst_index  + 1):ncol(final_output)])
# Find the position of "AVG..UNIT.PRICE" column
billed_weight_index <- which(names(final_output) == "BILLED.WEIGHT")
# Insert new columns after "AVG..UNIT.PRICE"
final_output <- cbind(final_output[, 1:billed_weight_index  ],
final_output[, c("cubic_weight", "max_weight", "weight_category_max", "uplift_service")],
final_output[, (billed_weight_index  + 1):ncol(final_output)])
# Write final_output to a CSV file
# Write final_output to a CSV file
write.csv(final_output, file = "final_output.csv")
# Write final_output to a CSV file
write.csv(final_output, file = "final_output.csv")
final_output_b <- final_output
final_output_minus_fees_and_charge_easy <- final_output_b[!grepl("charge|surcharge|admin|fuel|more|unmanifest", final_output_b$DESCRIPTION, ignore.case = TRUE), ]
invoice_test$total_supply_for_the_period <-sum(final_output_minus_fees_and_charge_easy$AMOUNT.EXCL.TAX, na.rm = TRUE)
# declare a data.frame
invoice_test <- data.frame(
Name = c("Bill total from Aus Post")
)
##### Whole invoice test ####
final_output_minus_fees_and_charge_easy <- final_output_b[!grepl("charge|surcharge|admin|fuel|more|unmanifest", final_output_b$DESCRIPTION, ignore.case = TRUE), ]
invoice_test$total_supply_for_the_period <-sum(final_output_minus_fees_and_charge_easy$AMOUNT.EXCL.TAX, na.rm = TRUE)
invoice_test$fees_and_charges_for_the_period_1 <- sum(final_output_b$FUEL.SURCHARGE..) + sum(final_output_b$SMC.FEE) +sum(final_output_b$OVER.MAX.LIMITS.FEE)
final_output_just_fees_and_charges <- final_output_b[grepl("charge|surcharge|admin|fuel|more|unmanifest", final_output_b$DESCRIPTION, ignore.case = TRUE), ]
invoice_test$fees_and_charges_for_the_period_2 <-sum(final_output_just_fees_and_charges$AMOUNT.EXCL.TAX, na.rm = TRUE)
invoice_test$gst_1 <- sum(final_output_minus_fees_and_charge_easy$SMC.GST + final_output_minus_fees_and_charge_easy$FUEL.GST
+ final_output_minus_fees_and_charge_easy$TAX.AMOUNT)
#### Just basic charges ####
invoice_test_just_basic <- data.frame(
Name = c("invoice_test_just_basic")
)
final_output2 <- subset(final_output_b, uplift_service %in% c( "Regular.VIC", "Express.VIC", "Regular.NSW", "Express.NSW", "EPP_fivekg", "ep_return_to_sender", "exp_eparcel_returns",
"reg_eparcel_returns", "reg_ep_call_for_return"))
final_output_minus_fees_and_charge_easy <- final_output2[!grepl("charge|surcharge|admin|fuel|more|unmanifest", final_output2$DESCRIPTION, ignore.case = TRUE), ]
invoice_test_just_basic$total_supply_for_the_period <-sum(final_output_minus_fees_and_charge_easy$AMOUNT.EXCL.TAX, na.rm = TRUE)
invoice_test_just_basic$fees_and_charges_for_the_period_1 <- sum(final_output2$FUEL.SURCHARGE..) + sum(final_output2$SMC.FEE) +sum(final_output2$OVER.MAX.LIMITS.FEE)
invoice_test_just_basic$gst_1 <- sum(final_output_minus_fees_and_charge_easy$SMC.GST + final_output_minus_fees_and_charge_easy$FUEL.GST
+ final_output_minus_fees_and_charge_easy$TAX.AMOUNT)
#### Post feb changes - my figures ####
invoice_test_post_feb <- data.frame(
Name = c("Post feb rates base")
)
final_output3 <- subset(final_output_b, uplift_service %in% c( "Regular.VIC", "Express.VIC", "Regular.NSW", "Express.NSW", "EPP_fivekg", "ep_return_to_sender", "exp_eparcel_returns",
"reg_eparcel_returns", "reg_ep_call_for_return"))
invoice_test_post_feb$total_supply_for_the_period <- sum(final_output3$base_charge_exgst, na.rm = TRUE)
invoice_test_post_feb$new_fees_and_surcharges <- sum(final_output3$fuel_surcharge,na.rm = TRUE)+ sum(final_output3$sec_mng_chrg,na.rm = TRUE)+ sum(final_output3$over_max_limits_fee, na.rm = TRUE)
invoice_test_post_feb$gst_1 <- sum(final_output3$fuel_gst, na.rm = TRUE) + sum(final_output3$sec_mng_gst, na.rm = TRUE) + sum (final_output3$base_charge_tax, na.rm = TRUE)
View(invoice_test)
View(final_output_just_fees_and_charges)
View(invoice_test_just_basic)
View(invoice_test_post_feb)
final_output_d <- subset(final_output, uplift_service %in% c("Regular.VIC"))
final_output_d$rounded_AMT <- round(final_output_d$AMOUNT.INCL.TAX, 2)
final_output_d$rounded_base_charge <- round(final_output_d$base_charge_incgst, 2)
diff <- ifelse(final_output_d$rounded_AMT != final_output_d$rounded_base_charge, "yes", "no")
count_diff <- table(diff)
print(count_diff)
final_output_d <- subset(final_output, uplift_service %in% c("Express.NSW"))
final_output_d$rounded_AMT <- round(final_output_d$AMOUNT.INCL.TAX, 2)
final_output_d$rounded_base_charge <- round(final_output_d$base_charge_incgst, 2)
diff <- ifelse(final_output_d$rounded_AMT != final_output_d$rounded_base_charge, "yes", "no")
count_diff <- table(diff)
print(count_diff)
final_output_d <- subset(final_output, uplift_service %in% c("Express.VIC"))
final_output_d$rounded_AMT <- round(final_output_d$AMOUNT.INCL.TAX, 2)
final_output_d$rounded_base_charge <- round(final_output_d$base_charge_incgst, 2)
diff <- ifelse(final_output_d$rounded_AMT != final_output_d$rounded_base_charge, "yes", "no")
count_diff <- table(diff)
print(count_diff)
final_output_d <- subset(final_output, uplift_service %in% c("Regular.NSW"))
final_output_d$rounded_AMT <- round(final_output_d$AMOUNT.INCL.TAX, 2)
final_output_d$rounded_base_charge <- round(final_output_d$base_charge_incgst, 2)
diff <- ifelse(final_output_d$rounded_AMT != final_output_d$rounded_base_charge, "yes", "no")
count_diff <- table(diff)
print(count_diff)
print(count_diff)
final_output_d <- subset(final_output, uplift_service %in% c("Wine.VIC"))
final_output_d$rounded_AMT <- round(final_output_d$AMOUNT.INCL.TAX, 2)
final_output_d$rounded_base_charge <- round(final_output_d$base_charge_incgst, 2)
diff <- ifelse(final_output_d$rounded_AMT != final_output_d$rounded_base_charge, "yes", "no")
count_diff <- table(diff)
print(count_diff)
final_output_d <- subset(final_output, DESCRIPTION %in% c("PACK AND TRACK INTERNATIONAL"))
final_output_d$rounded_AMT <- round(final_output_d$AMOUNT.INCL.TAX, 2)
final_output_d$rounded_base_charge <- round(final_output_d$base_charge_incgst, 2)
diff <- ifelse(final_output_d$rounded_AMT != final_output_d$rounded_base_charge, "yes", "no")
count_diff <- table(diff)
print(count_diff)
final_output_d <- subset(final_output, DESCRIPTION %in% c("Express Courier International (eParcel)"))
final_output_d$rounded_AMT <- round(final_output_d$AMOUNT.INCL.TAX, 2)
final_output_d$rounded_base_charge <- round(final_output_d$base_charge_incgst, 2)
diff <- ifelse(final_output_d$rounded_AMT != final_output_d$rounded_base_charge, "yes", "no")
count_diff <- table(diff)
print(count_diff)
View(final_output_b)
final_output_d <- subset(final_output, DESCRIPTION %in% c("PACK AND TRACK INTERNATIONAL"))
final_output_d$rounded_AMT <- round(final_output_d$AMOUNT.INCL.TAX, 2)
final_output_d$rounded_base_charge <- round(final_output_d$base_charge_incgst, 2)
diff <- ifelse(final_output_d$rounded_AMT != final_output_d$rounded_base_charge, "yes", "no")
count_diff <- table(diff)
print(count_diff)
final_output_d <- subset(final_output, DESCRIPTION %in% c("Express Courier International (eParcel)"))
final_output_d$rounded_AMT <- round(final_output_d$AMOUNT.INCL.TAX, 2)
final_output_d$rounded_base_charge <- round(final_output_d$base_charge_incgst, 2)
diff <- ifelse(final_output_d$rounded_AMT != final_output_d$rounded_base_charge, "yes", "no")
count_diff <- table(diff)
print(count_diff)
# Write final_output to a CSV file
write.csv(final_output, file = "final_output.csv")
