output_d_2 <-cbind(output_d1, (cbind(row_index_max, col_index_max)))
# query new base charge rate
# Function to extract values from charge zone dataset based on indices
extract_charge_value_max_incgst <- function(row_index_max, col_index_max) {
charge_value <- cz_post_feb_eparcel_express_ex_syd[row_index_max, col_index_max]
return(charge_value)
}
output_d_2$charge_value_max_incgst <- mapply(extract_charge_value_max_incgst, output_d_2$row_index_max, output_d_2$col_index_max)
# Function to calculate charge based on charge_value_max_incgst and Per_Kg_#. Also does the calc if  weight_category_max == "Basic"
calculate_final_charge <- function(charge_value_max_incgst, weight_category_max, max_weight, row_index_max) {
if (weight_category_max == "Basic") {
per_kg_value <- cz_post_feb_eparcel_express_ex_syd[row_index_max, "Per_Kg"]
return(charge_value_max_incgst + (per_kg_value * (ceiling(max_weight))))
} else {
return(charge_value_max_incgst)
}
}
output_d_2$base_charge_incgst <- mapply(calculate_final_charge, output_d_2$charge_value_max_incgst, output_d_2$weight_category_max, output_d_2$max_weight, output_d_2$row_index_max)
#### Base charge for Express Post Parcels (BYO up to 5kg) ####
# to be tested when I can bring this in
#output_e <- subset(output_a, uplift_service %in% c("EPP_fivekg"))
#output_e$base_charge_incgst <- ifelse(output_e$DESCRIPTION == "Express Post Parcels (BYO up to 5kg)",
#                                                ex_pp_byo_up_to_5kg,
#                                                NA)
#### Base charge for eparcel return to sender, Express Post eparcel returns, eParcel Post Return (Reg)  ####
# Function to subset data based on uplift_service and perform operations
subset_and_operate <- function(data, service, fee) {
subset_data <- subset(data, uplift_service %in% service)
if (nrow(subset_data) > 0) {
subset_data$row_index_max <- NA
subset_data$col_index_max <- NA
subset_data$charge_value_max_incgst <- NA
subset_data$base_charge_incgst <- fee
return(subset_data)
} else {
return(NULL)
}
}
# eparcel return to sender
output_f <- subset_and_operate(output_a, "ep_return_to_sender", ep_return_to_sender_fee)
# Express Post eparcel returns
output_g <- subset_and_operate(output_a, "exp_eparcel_returns", exp_eparcel_returns_fee)
# eParcel Post Return (Reg)
output_h <- subset_and_operate(output_a, c("reg_eparcel_returns", "reg_ep_call_for_return"), reg_eparcel_returns_fee)
#### base charge for eparcel_wine.VIC ####
# cut the dataset down to correct uplift service
output_i1 <- subset(output_a, uplift_service %in% c("Wine.VIC"))
#Determine the indexes to use to query the new base charge zone sheet
# find the row and column number to reference against z_c
col_name_max<- as.character(output_i1$weight_category_max)
col_index_max <- unlist(lapply(output_i1$weight_category_max, function(col_name_max) {
which(colnames(cz_post_feb_eparcel_wine_ex_mel) == col_name_max)
}))
row_name_max<- as.character(output_i1$CHARGE.ZONE)
row_index_max <- unlist(lapply(row_name_max, function(row_name_max) {
index <- which(rownames(cz_post_feb_eparcel_wine_ex_mel) == row_name_max)
if (length(index) == 0) {
NA
} else {
index
}
}))
output_i_2 <-cbind(output_i1, (cbind(row_index_max, col_index_max)))
# query new base charge rate
# Function to extract values from charge zone dataset based on indices
extract_charge_value_max_incgst <- function(row_index_max, col_index_max) {
charge_value <- cz_post_feb_eparcel_wine_ex_mel[row_index_max, col_index_max]
return(charge_value)
}
output_i_2$charge_value_max_incgst <- mapply(extract_charge_value_max_incgst, output_i_2$row_index_max, output_i_2$col_index_max)
output_i_2$base_charge_incgst <- output_i_2$charge_value_max_incgst
#### base charge for eparcel_wine.NSW #####
# cut the dataset down to correct uplift service
output_j1 <- subset(output_a, uplift_service %in% c("Wine.NSW"))
#Determine the indexes to use to query the new base charge zone sheet
# find the row and column number to reference against z_c
col_name_max<- as.character(output_j1$weight_category_max)
col_index_max <- unlist(lapply(output_j1$weight_category_max, function(col_name_max) {
which(colnames(cz_post_feb_eparcel_wine_ex_syd) == col_name_max)
}))
row_name_max<- as.character(output_j1$CHARGE.ZONE)
row_index_max <- unlist(lapply(row_name_max, function(row_name_max) {
index <- which(rownames(cz_post_feb_eparcel_wine_ex_syd) == row_name_max)
if (length(index) == 0) {
NA
} else {
index
}
}))
output_j_2 <-cbind(output_j1, (cbind(row_index_max, col_index_max)))
# query new base charge rate
# Function to extract values from charge zone dataset based on indices
extract_charge_value_max_incgst <- function(row_index_max, col_index_max) {
charge_value <- cz_post_feb_eparcel_wine_ex_syd[row_index_max, col_index_max]
return(charge_value)
}
output_j_2$charge_value_max_incgst <- mapply(extract_charge_value_max_incgst, output_j_2$row_index_max, output_j_2$col_index_max)
output_j_2$base_charge_incgst <- output_j_2$charge_value_max_incgst
#### Base charge for PACK AND TRACK INTERNATIONAL ####
# have to return to international as a whole to give us the logic to determine the correct per KG multiplication
# using the description here
output_l1 <- subset(output_a, DESCRIPTION  %in% c("PACK AND TRACK INTERNATIONAL"))
#Determine the indexes to use to query the new base charge zone sheet
# find the row and column number to reference against z_c
col_name_max<- as.character(output_l1$weight_category_max)
col_index_max <- unlist(lapply(output_l1$weight_category_max, function(col_name_max) {
which(colnames(cz_post_feb_eparcel_international_standard) == col_name_max)
}))
row_name_max<- as.character(output_l1$CHARGE.ZONE)
row_index_max <- unlist(lapply(row_name_max, function(row_name_max) {
index <- which(rownames(cz_post_feb_eparcel_international_standard) == row_name_max)
if (length(index) == 0) {
NA
} else {
index
}
}))
output_l_2 <-cbind(output_l1, (cbind(row_index_max, col_index_max)))
sapply(output_l_2, class)
# query new base charge rate
# Function to extract values from charge zone dataset based on indices
extract_charge_value_max_incgst <- function(row_index_max, col_index_max) {
charge_value <- cz_post_feb_eparcel_international_standard[row_index_max, col_index_max]
return(as.numeric(charge_value))
}
output_l_2$charge_value_max_incgst <- mapply(extract_charge_value_max_incgst, output_l_2$row_index_max, output_l_2$col_index_max)
sapply(output_l_2, class)
# Function to calculate charge based on charge_value_max_incgst and Per_Kg_#. Also does the calc if  weight_category_max == "X2.01kg_to_20kg"
#calculate_final_charge <- function(charge_value_max_incgst, weight_category_max, max_weight, row_index_max) {
#  if (weight_category_max == "X2.01kg_to_20kg") {
#    per_kg_value <- cz_post_feb_eparcel_international_standard[row_index_max, "Per_Kg_2"]
#   return(charge_value_max_incgst + (per_kg_value * (max_weight)))
#  } else {
#    return(charge_value_max_incgst)
#  }
#}
calculate_final_charge <- function(charge_value_max_incgst, weight_category_max, max_weight, row_index_max) {
if (weight_category_max == "Above_20kg_for_international") {
return(0)
}
else if (weight_category_max == "X2.01kg_to_20kg") {
per_kg_value <- cz_post_feb_eparcel_international_standard[row_index_max, "Per_Kg_2"]
return(charge_value_max_incgst + (per_kg_value * max_weight))
}
else if (weight_category_max %in% c("Up_to_500g", "X501g_to_1kg", "X1.01kg_to_2kg")) {
per_kg_value <- cz_post_feb_eparcel_international_standard[row_index_max, "Per_Kg_1"]
return(charge_value_max_incgst + (per_kg_value * max_weight))
}
else {
return(charge_value_max_incgst)
}
}
output_l_2$base_charge_incgst <- mapply(calculate_final_charge, output_l_2$charge_value_max_incgst, output_l_2$weight_category_max, output_l_2$max_weight, output_l_2$row_index_max)
sapply(output_l_2, class)
#### Base charge fo Express Courier International (eParcel) ####
# using the description here
output_k1 <- subset(output_a, DESCRIPTION  %in% c("Express Courier International (eParcel)"))
#Determine the indexes to use to query the new base charge zone sheet
# find the row and column number to reference against z_c
col_name_max<- as.character(output_k1$weight_category_max)
col_index_max <- unlist(lapply(output_k1$weight_category_max, function(col_name_max) {
which(colnames(cz_post_feb_eparcel_international_express_merch) == col_name_max)
}))
row_name_max<- as.character(output_k1$CHARGE.ZONE)
row_index_max <- unlist(lapply(row_name_max, function(row_name_max) {
index <- which(rownames(cz_post_feb_eparcel_international_express_merch) == row_name_max)
if (length(index) == 0) {
NA
} else {
index
}
}))
output_k_2 <-cbind(output_k1, (cbind(row_index_max, col_index_max)))
sapply(output_k_2, class)
# query new base charge rate
# Function to extract values from charge zone dataset based on indices
extract_charge_value_max_incgst <- function(row_index_max, col_index_max) {
charge_value <- cz_post_feb_eparcel_international_express_merch[row_index_max, col_index_max]
return(charge_value)
}
output_k_2$charge_value_max_incgst <- mapply(extract_charge_value_max_incgst, output_k_2$row_index_max, output_k_2$col_index_max)
# Function to calculate charge based on charge_value_max_incgst and Per_Kg_#. Also does the calc if  weight_category_max == "X2.01kg_to_20kg"
calculate_final_charge <- function(charge_value_max_incgst, weight_category_max, max_weight, row_index_max) {
if (weight_category_max == "X2.01kg_to_20kg") {
per_kg_value <- cz_post_feb_eparcel_international_express_merch[row_index_max, "Per_Kg"]
return(charge_value_max_incgst + (per_kg_value * (max_weight)))
} else {
return(charge_value_max_incgst)
}
}
output_k_2$base_charge_incgst <- mapply(calculate_final_charge, output_k_2$charge_value_max_incgst, output_k_2$weight_category_max, output_k_2$max_weight, output_k_2$row_index_max)
write.csv(output_k_2, file = "output_k_2.csv")
#### combine all DFs together ######
output_all_services  <- rbind(output_a_2, output_b_2, output_c_2, output_d_2, output_f, output_g, output_h, output_i_2, output_j_2, output_l_2, output_k_2)
#write.csv(output_all_services, file = "output_all_services.csv")
#### additional mapping ####
# 1.50 mark up for wine tbc
#output_all_services <- output_all_services %>%
#  arrange(CONSIGNMENT.ID, TO.ADDRESS) %>%
# group_by(CONSIGNMENT.ID, TO.ADDRESS) %>%
# mutate(
#    new_base_charge_incgst = base_charge_incgst - 1.50 * (row_number() - 1)
#  ) %>%
#  ungroup()
output_all_services$base_charge_exgst <- ifelse(output_all_services$is_gst_free_zone == 'No',
(output_all_services$base_charge_incgst/ 110) * 100,
output_all_services$base_charge_incgst)
write.csv(output_all_services, file = "output_all_services.csv")
# find the tax amount
output_all_services$base_charge_tax <- output_all_services$base_charge_incgst - output_all_services$base_charge_exgst
# calculate fuel surcharge based on ex gst
output_all_services$fuel_surcharge <- output_all_services$base_charge_exgst * fuel_surcharge_pct
output_all_services$fuel_gst <- output_all_services$fuel_surcharge  * gst
# calculate security management fee
output_all_services$sec_mng_chrg <- ifelse(output_all_services$DESCRIPTION == "Express Post with Signature",
output_all_services$base_charge_exgst * sec_mng_chrg_pct,
NA)
output_all_services$sec_mng_gst <- output_all_services$sec_mng_chrg * gst
##### multiply by customer uplift   ####
# first step is to find the indices
# Initialize vectors to store indices
col_index_uplift <- numeric(nrow(output_all_services))
row_index_uplift <- numeric(nrow(output_all_services))
# Iterate over each row
for (i in 1:nrow(output_all_services)) {
if (output_all_services$DESCRIPTION[i] %in% c("Parcel Post with Signature", "Express Post with Signature", "EPARCEL WINE STD",
"Express Courier International (eParcel)", "PACK AND TRACK INTERNATIONAL", "eParcel Return To Sender",
"eParcel Post Return", "eParcel Call For Return", "Express Post eparcel returns","International Returns AIR",
"International Returns Express")) {
# Determine uplift_service based on description and region
uplift_service <- ifelse(
output_all_services$DESCRIPTION[i] %in% c("eParcel Return To Sender", "eParcel Post Return", "eParcel Call For Return") &
output_all_services$REGION[i] == "VIC", "Regular.VIC",
ifelse(
output_all_services$DESCRIPTION[i] %in% c("eParcel Return To Sender", "eParcel Post Return", "eParcel Call For Return") &
output_all_services$REGION[i] == "NSW", "Regular.NSW",
ifelse(
output_all_services$DESCRIPTION[i] == "Express Post eparcel returns" & output_all_services$REGION[i] == "VIC", "Express.VIC",
ifelse(
output_all_services$DESCRIPTION[i] == "Express Post eparcel returns" & output_all_services$REGION[i] == "NSW", "Express.NSW",
ifelse(
output_all_services$DESCRIPTION[i] %in% c("International Returns AIR", "International Returns Express"), "International", NA
)
)
)
)
)
# Find column and row indices
col_name_uplift <- as.character(uplift_service)
col_match <- which(colnames(customer_uplift_march_24) == col_name_uplift)
row_name_uplift <- as.character(output_all_services$customer_code[i])
row_match <- which(rownames(customer_uplift_march_24) == row_name_uplift)
# Assign indices or NA
col_index_uplift[i] <- ifelse(length(col_match) == 0, NA, col_match)
row_index_uplift[i] <- ifelse(length(row_match) == 0, NA, row_match)
} else {
# Assign existing uplift service and indices or NA
uplift_service <- existing_uplift_service[i]  # Assuming existing_uplift_service is a vector of uplift services for each row
col_index_uplift[i] <- ifelse(length(col_match) == 0, NA, col_match)
row_index_uplift[i] <- ifelse(length(row_match) == 0, NA, row_match)
}
}
# Combine the indices with the original dataframe
output_all_services_2 <- cbind(output_all_services, row_index_uplift, col_index_uplift)
# query to find uplift
extract_charge_value_uplift <- function(row_index_uplift, col_index_uplift) {
if (is.na(row_index_uplift) || is.na(col_index_uplift)) {
return(0)
} else {
charge_value <- customer_uplift_march_24[row_index_uplift, col_index_uplift]
# Check if charge_value is blank or NA, if so, return 0
if (is.na(charge_value) || charge_value == "") {
return(0)
} else {
return(charge_value)
}
}
}
output_all_services_2$charge_value_uplift <- mapply(extract_charge_value_uplift, output_all_services_2$row_index_uplift, output_all_services_2$col_index_uplift)
#### warning cols taken here
# Col to highlight if we are missing weight information or custo has no uplift
# Create a new column 'warnings' in output_all_services_2
output_all_services_2$warnings <- NA
# Condition 1: If charge_value_uplift is blank, NA, or 0
output_all_services_2$warnings[is.na(output_all_services_2$charge_value_uplift) |
output_all_services_2$charge_value_uplift == 0 |
output_all_services_2$charge_value_uplift == ""] <- "no uplift found"
# Condition 2: If uplift_service == 'International' and BILLED.WEIGHT == 0
output_all_services_2$warnings[output_all_services_2$uplift_service == 'International' &
output_all_services_2$BILLED.WEIGHT == 0] <- "declared weight used"
# Condition 3: If uplift_service is not one of the specified values and cubic_weight == 0 & BILLED.WEIGHT == 0
output_all_services_2$warnings[!(output_all_services_2$uplift_service %in% c('International',
'reg_ep_call_for_return',
'ep_return_to_sender',
'reg_eparcel_returns')) &
output_all_services_2$cubic_weight == 0 &
output_all_services_2$BILLED.WEIGHT == 0] <- "declared weight used"
# Condition 4: If weight_category_max is NA or 0
output_all_services_2$warnings[is.na(output_all_services_2$weight_category_max) |
output_all_services_2$weight_category_max == 0] <- "no weight detected so 0 charge applied"
# Condition 5: If weight_category_max is "Above_22kg_for_Wine"
output_all_services_2$warnings[output_all_services_2$weight_category_max == "Above_22kg_for_Wine"] <- "over 22kg for wine"
#### multiply base by uplift ####
# Incgst Convert charge_value_uplift to numeric, handling NA values
output_all_services_2$charge_value_uplift_numeric_incgst <- ifelse(is.na(output_all_services_2$charge_value_uplift) | is.na(output_all_services_2$base_charge_exgst),
NA,
as.numeric(sub("%", "", output_all_services_2$charge_value_uplift)))
#exgst
output_all_services_2$charge_value_uplift_numeric_exgst <- ifelse(is.na(output_all_services_2$charge_value_uplift) | is.na(output_all_services_2$base_charge_exgst),
NA,
as.numeric(sub("%", "", output_all_services_2$charge_value_uplift)))
# Incgst Convert base_charge_exgst to numeric, handling NA values
#exgst
output_all_services_2$charge_value_max_exgst_numeric <- ifelse(is.na(output_all_services_2$charge_value_uplift) | is.na(output_all_services_2$base_charge_exgst),
NA,
as.numeric(gsub("[^0-9.]", "", output_all_services_2$base_charge_exgst)))
# Incgst Calculate the percentage of base_charge_exgst, handling NA values
#exgst
output_all_services_2$uplift_figure_exgst <- ifelse(is.na(output_all_services_2$charge_value_uplift_numeric_exgst) | is.na(output_all_services_2$charge_value_max_exgst_numeric),
NA,
(output_all_services_2$charge_value_uplift_numeric_exgst / 100) * output_all_services_2$charge_value_max_exgst_numeric)
#  Incgst Filter out NA and non-numeric values before performing addition
#exgst
output_all_services_2$charge_to_custo_exgst <- ifelse(is.na(output_all_services_2$charge_value_max_exgst_numeric) | is.na(output_all_services_2$uplift_figure_exgst) | !is.numeric(output_all_services_2$charge_value_max_exgst_numeric) | !is.numeric(output_all_services_2$uplift_figure_exgst),
NA,
output_all_services_2$charge_value_max_exgst_numeric + output_all_services_2$uplift_figure_exgst)
# update table name
output_all_services_2 <- output_all_services_2
#output_all_services_2 <- subset(output_all_services_2 , ARTICLE.ID %in% c('ET239232669AU'))
##### write to CSV ####
write.csv(output_all_services_2, file = "output_all_services_2.csv")
'2ES500191101000650807
library(dplyr)
##### Bring in the required datasets #####
#bill = read.csv("ESTORELOGISTICSPTYLTD_0006794750_20240303_1013048181.csv", head=TRUE, sep=",")
#bill = read.csv("ESTORELOGISTICSPTYLTD_0006794750_20240219_1013016084.csv", head=TRUE, sep=",")
#bill = read.csv("1013111472-5890569129689088.csv", head=TRUE, sep=",")
#1013156007-5729374082957312
bill = read.csv("1013156007-5729374082957312.csv", head=TRUE, sep=",")
# pre feb base rates. Left in for pulling comparison calcs
#cz_pre_feb_eparcel_regular_ex_mel = read.csv("cz_pre_feb_eparcel_regular_ex_mel.csv", head=TRUE, row.names = 1,  sep=",")
#cz_pre_feb_eparcel_express_ex_mel = read.csv("cz_pre_feb_eparcel_express_ex_mel.csv", head=TRUE, row.names = 1,  sep=",")
#cz_pre_feb_eparcel_regular_ex_syd = read.csv("cz_pre_feb_eparcel_regular_ex_syd.csv", head=TRUE, row.names = 1,  sep=",")
#cz_pre_feb_eparcel_express_ex_syd = read.csv("cz_pre_feb_eparcel_express_ex_syd.csv", head=TRUE, row.names = 1,  sep=",")
# post feb 1st base rates. Left in for pulling comparison calcs
cz_post_feb_eparcel_regular_ex_mel = read.csv("cz_post_feb_eparcel_regular_ex_mel.csv", head=TRUE, row.names = 1,  sep=",")
cz_post_feb_eparcel_express_ex_mel = read.csv("cz_post_feb_eparcel_express_ex_mel.csv", head=TRUE, row.names = 1,  sep=",")
cz_post_feb_eparcel_regular_ex_syd = read.csv("cz_post_feb_eparcel_regular_ex_syd.csv", head=TRUE, row.names = 1,  sep=",")
cz_post_feb_eparcel_express_ex_syd = read.csv("cz_post_feb_eparcel_express_ex_syd.csv", head=TRUE, row.names = 1,  sep=",")
cz_post_feb_eparcel_express_ex_syd = read.csv("cz_post_feb_eparcel_express_ex_syd.csv", head=TRUE, row.names = 1,  sep=",")
cz_post_feb_eparcel_wine_ex_mel = read.csv("cz_post_feb_eparcel_wine_ex_mel.csv", head=TRUE, row.names = 1,  sep=",")
cz_post_feb_eparcel_wine_ex_syd = read.csv("cz_post_feb_eparcel_wine_ex_syd.csv", head=TRUE, row.names = 1,  sep=",")
cz_post_feb_eparcel_international_express_merch = read.csv("cz_post_feb_eparcel_international_express_merch.csv", head=TRUE, row.names = 1,  sep=",")
cz_post_feb_eparcel_international_standard = read.csv("cz_post_feb_eparcel_international_standard.csv", head=TRUE, row.names = 1,  sep=",")
# custo mark up
customer_uplift_march_24 = read.csv("customer_uplift_march_24.csv", head=TRUE, row.names = 1,  sep=",")
#colnames(cz_melb_espress) <- sub("^X", "", colnames(cz_melb_espress))
#### remove the summary lines we do not want ####
bill_cut1 <- bill[!grepl("charge|surcharge|admin|fuel", bill$DESCRIPTION, ignore.case = TRUE), ]
#bill_cut1 <- bill
#cutting the dataset down to just the metrics we need for ALL of the basic calculations
bill_cut1 <-  bill_cut1[,  c("REGION", "RECEIVING.COUNTRY", "CUSTOMER", "NAME_1", "NAME_2", "NAME_3", "DESCRIPTION", "BILLING.DOC", "SERVICE.DATE", "TO.ADDRESS", "CONSIGNMENT.ID", "ARTICLE.ID",
"BILLED.LENGTH", "BILLED.WIDTH", "BILLED.HEIGHT", "CUBIC.WEIGHT", "BILLED.WEIGHT", "ACTUAL.WEIGHT", "CHARGE.ZONE", "FROM.STATE", "AVG..UNIT.PRICE" , "AMOUNT.EXCL.TAX", "DECLARED.WEIGHT")]
# get the lift service as per uplift card. This covers all thats in the description
bill_cut1$uplift_service <- ifelse(bill_cut1$REGION == "VIC" & bill_cut1$DESCRIPTION == "Parcel Post with Signature", "Regular.VIC",
ifelse(bill_cut1$REGION == "VIC" & bill_cut1$DESCRIPTION == "Express Post with Signature", "Express.VIC",
ifelse(bill_cut1$REGION == "NSW" & bill_cut1$DESCRIPTION == "Parcel Post with Signature", "Regular.NSW",
ifelse(bill_cut1$REGION == "NSW" & bill_cut1$DESCRIPTION == "Express Post with Signature", "Express.NSW",
ifelse(bill_cut1$DESCRIPTION == "Express Post Parcels (BYO up to 5kg)", "EPP_fivekg",
ifelse(bill_cut1$DESCRIPTION == "eParcel Return To Sender", "ep_return_to_sender",
ifelse(bill_cut1$DESCRIPTION == "Express Post eparcel returns", "exp_eparcel_returns",
ifelse(bill_cut1$DESCRIPTION == "eParcel Post Return", "reg_eparcel_returns",
ifelse(bill_cut1$DESCRIPTION == "eParcel Call For Return", "reg_ep_call_for_return",
ifelse(bill_cut1$REGION == "VIC" & bill_cut1$DESCRIPTION == "EPARCEL WINE STD", "Wine.VIC",
ifelse(bill_cut1$REGION == "NSW" & bill_cut1$DESCRIPTION == "EPARCEL WINE STD", "Wine.NSW",
ifelse(bill_cut1$DESCRIPTION == "PACK AND TRACK INTERNATIONAL", "International",
ifelse(bill_cut1$DESCRIPTION == "Express Courier International (eParcel)", "International",
NA)))))))))))))
##### customer code ####
# Function to extract letters before the first "-"
extract_letters <- function(text) {
split_text <- strsplit(as.character(text), "-")[[1]]
return(trimws(split_text[1]))
}
bill_cut1$customer_code <- sapply(bill_cut1$NAME_1, extract_letters)
### create a col to determine if its GST free
# Define a function to apply the logic
is_gst_free <- function(zone) {
ifelse(zone %in% c("NF", "W4", "AAT", "Z1", "Z2", "Z3", "Z4", "Z5", "Z6", "Z7", "Z8", "Z9" ), "Yes", "No")
}
# Apply the function to create the new column
bill_cut1$is_gst_free_zone <- is_gst_free(bill_cut1$CHARGE.ZONE)
library(dplyr)
##### Bring in the required datasets #####
#bill = read.csv("ESTORELOGISTICSPTYLTD_0006794750_20240303_1013048181.csv", head=TRUE, sep=",")
#bill = read.csv("ESTORELOGISTICSPTYLTD_0006794750_20240219_1013016084.csv", head=TRUE, sep=",")
#bill = read.csv("1013111472-5890569129689088.csv", head=TRUE, sep=",")
#1013156007-5729374082957312
bill = read.csv("1013156007-5729374082957312.csv", head=TRUE, sep=",")
# pre feb base rates. Left in for pulling comparison calcs
#cz_pre_feb_eparcel_regular_ex_mel = read.csv("cz_pre_feb_eparcel_regular_ex_mel.csv", head=TRUE, row.names = 1,  sep=",")
#cz_pre_feb_eparcel_express_ex_mel = read.csv("cz_pre_feb_eparcel_express_ex_mel.csv", head=TRUE, row.names = 1,  sep=",")
#cz_pre_feb_eparcel_regular_ex_syd = read.csv("cz_pre_feb_eparcel_regular_ex_syd.csv", head=TRUE, row.names = 1,  sep=",")
#cz_pre_feb_eparcel_express_ex_syd = read.csv("cz_pre_feb_eparcel_express_ex_syd.csv", head=TRUE, row.names = 1,  sep=",")
# post feb 1st base rates. Left in for pulling comparison calcs
cz_post_feb_eparcel_regular_ex_mel = read.csv("cz_post_feb_eparcel_regular_ex_mel.csv", head=TRUE, row.names = 1,  sep=",")
cz_post_feb_eparcel_express_ex_mel = read.csv("cz_post_feb_eparcel_express_ex_mel.csv", head=TRUE, row.names = 1,  sep=",")
cz_post_feb_eparcel_regular_ex_syd = read.csv("cz_post_feb_eparcel_regular_ex_syd.csv", head=TRUE, row.names = 1,  sep=",")
cz_post_feb_eparcel_express_ex_syd = read.csv("cz_post_feb_eparcel_express_ex_syd.csv", head=TRUE, row.names = 1,  sep=",")
cz_post_feb_eparcel_express_ex_syd = read.csv("cz_post_feb_eparcel_express_ex_syd.csv", head=TRUE, row.names = 1,  sep=",")
cz_post_feb_eparcel_wine_ex_mel = read.csv("cz_post_feb_eparcel_wine_ex_mel.csv", head=TRUE, row.names = 1,  sep=",")
cz_post_feb_eparcel_wine_ex_syd = read.csv("cz_post_feb_eparcel_wine_ex_syd.csv", head=TRUE, row.names = 1,  sep=",")
cz_post_feb_eparcel_international_express_merch = read.csv("cz_post_feb_eparcel_international_express_merch.csv", head=TRUE, row.names = 1,  sep=",")
cz_post_feb_eparcel_international_standard = read.csv("cz_post_feb_eparcel_international_standard.csv", head=TRUE, row.names = 1,  sep=",")
# custo mark up
customer_uplift_march_24 = read.csv("customer_uplift_march_24.csv", head=TRUE, row.names = 1,  sep=",")
#colnames(cz_melb_espress) <- sub("^X", "", colnames(cz_melb_espress))
#### remove the summary lines we do not want ####
bill_cut1 <- bill[!grepl("charge|surcharge|admin|fuel", bill$DESCRIPTION, ignore.case = TRUE), ]
#bill_cut1 <- bill
#cutting the dataset down to just the metrics we need for ALL of the basic calculations
bill_cut1 <-  bill_cut1[,  c("REGION", "RECEIVING.COUNTRY", "CUSTOMER", "NAME_1", "NAME_2", "NAME_3", "DESCRIPTION", "BILLING.DOC", "SERVICE.DATE", "TO.ADDRESS", "CONSIGNMENT.ID", "ARTICLE.ID",
"BILLED.LENGTH", "BILLED.WIDTH", "BILLED.HEIGHT", "CUBIC.WEIGHT", "BILLED.WEIGHT", "ACTUAL.WEIGHT", "CHARGE.ZONE", "FROM.STATE", "AVG..UNIT.PRICE" , "AMOUNT.EXCL.TAX", "DECLARED.WEIGHT")]
# get the lift service as per uplift card. This covers all thats in the description
bill_cut1$uplift_service <- ifelse(bill_cut1$REGION == "VIC" & bill_cut1$DESCRIPTION == "Parcel Post with Signature", "Regular.VIC",
ifelse(bill_cut1$REGION == "VIC" & bill_cut1$DESCRIPTION == "Express Post with Signature", "Express.VIC",
ifelse(bill_cut1$REGION == "NSW" & bill_cut1$DESCRIPTION == "Parcel Post with Signature", "Regular.NSW",
ifelse(bill_cut1$REGION == "NSW" & bill_cut1$DESCRIPTION == "Express Post with Signature", "Express.NSW",
ifelse(bill_cut1$DESCRIPTION == "Express Post Parcels (BYO up to 5kg)", "EPP_fivekg",
ifelse(bill_cut1$DESCRIPTION == "eParcel Return To Sender", "ep_return_to_sender",
ifelse(bill_cut1$DESCRIPTION == "Express Post eparcel returns", "exp_eparcel_returns",
ifelse(bill_cut1$DESCRIPTION == "eParcel Post Return", "reg_eparcel_returns",
ifelse(bill_cut1$DESCRIPTION == "eParcel Call For Return", "reg_ep_call_for_return",
ifelse(bill_cut1$REGION == "VIC" & bill_cut1$DESCRIPTION == "EPARCEL WINE STD", "Wine.VIC",
ifelse(bill_cut1$REGION == "NSW" & bill_cut1$DESCRIPTION == "EPARCEL WINE STD", "Wine.NSW",
ifelse(bill_cut1$DESCRIPTION == "PACK AND TRACK INTERNATIONAL", "International",
ifelse(bill_cut1$DESCRIPTION == "Express Courier International (eParcel)", "International",
NA)))))))))))))
##### customer code ####
# Function to extract letters before the first "-"
extract_letters <- function(text) {
split_text <- strsplit(as.character(text), "-")[[1]]
return(trimws(split_text[1]))
}
bill_cut1$customer_code <- sapply(bill_cut1$NAME_1, extract_letters)
### create a col to determine if its GST free
# Define a function to apply the logic
is_gst_free <- function(zone) {
ifelse(zone %in% c("NF", "W4", "AAT", "Z1", "Z2", "Z3", "Z4", "Z5", "Z6", "Z7", "Z8", "Z9" ), "Yes", "No")
}
# Apply the function to create the new column
bill_cut1$is_gst_free_zone <- is_gst_free(bill_cut1$CHARGE.ZONE)
library(dplyr)
##### Bring in the required datasets #####
#bill = read.csv("ESTORELOGISTICSPTYLTD_0006794750_20240303_1013048181.csv", head=TRUE, sep=",")
#bill = read.csv("ESTORELOGISTICSPTYLTD_0006794750_20240219_1013016084.csv", head=TRUE, sep=",")
#bill = read.csv("1013111472-5890569129689088.csv", head=TRUE, sep=",")
#1013156007-5729374082957312
bill = read.csv("1013156007-5729374082957312.csv", head=TRUE, sep=",")
# pre feb base rates. Left in for pulling comparison calcs
#cz_pre_feb_eparcel_regular_ex_mel = read.csv("cz_pre_feb_eparcel_regular_ex_mel.csv", head=TRUE, row.names = 1,  sep=",")
#cz_pre_feb_eparcel_express_ex_mel = read.csv("cz_pre_feb_eparcel_express_ex_mel.csv", head=TRUE, row.names = 1,  sep=",")
#cz_pre_feb_eparcel_regular_ex_syd = read.csv("cz_pre_feb_eparcel_regular_ex_syd.csv", head=TRUE, row.names = 1,  sep=",")
#cz_pre_feb_eparcel_express_ex_syd = read.csv("cz_pre_feb_eparcel_express_ex_syd.csv", head=TRUE, row.names = 1,  sep=",")
# post feb 1st base rates. Left in for pulling comparison calcs
cz_post_feb_eparcel_regular_ex_mel = read.csv("cz_post_feb_eparcel_regular_ex_mel.csv", head=TRUE, row.names = 1,  sep=",")
cz_post_feb_eparcel_express_ex_mel = read.csv("cz_post_feb_eparcel_express_ex_mel.csv", head=TRUE, row.names = 1,  sep=",")
cz_post_feb_eparcel_regular_ex_syd = read.csv("cz_post_feb_eparcel_regular_ex_syd.csv", head=TRUE, row.names = 1,  sep=",")
cz_post_feb_eparcel_express_ex_syd = read.csv("cz_post_feb_eparcel_express_ex_syd.csv", head=TRUE, row.names = 1,  sep=",")
cz_post_feb_eparcel_express_ex_syd = read.csv("cz_post_feb_eparcel_express_ex_syd.csv", head=TRUE, row.names = 1,  sep=",")
cz_post_feb_eparcel_wine_ex_mel = read.csv("cz_post_feb_eparcel_wine_ex_mel.csv", head=TRUE, row.names = 1,  sep=",")
cz_post_feb_eparcel_wine_ex_syd = read.csv("cz_post_feb_eparcel_wine_ex_syd.csv", head=TRUE, row.names = 1,  sep=",")
cz_post_feb_eparcel_international_express_merch = read.csv("cz_post_feb_eparcel_international_express_merch.csv", head=TRUE, row.names = 1,  sep=",")
cz_post_feb_eparcel_international_standard = read.csv("cz_post_feb_eparcel_international_standard.csv", head=TRUE, row.names = 1,  sep=",")
# custo mark up
customer_uplift_march_24 = read.csv("customer_uplift_march_24.csv", head=TRUE, row.names = 1,  sep=",")
#colnames(cz_melb_espress) <- sub("^X", "", colnames(cz_melb_espress))
#### remove the summary lines we do not want ####
bill_cut1 <- bill[!grepl("charge|surcharge|admin|fuel", bill$DESCRIPTION, ignore.case = TRUE), ]
#bill_cut1 <- bill
#cutting the dataset down to just the metrics we need for ALL of the basic calculations
bill_cut1 <-  bill_cut1[,  c("REGION", "RECEIVING.COUNTRY", "CUSTOMER", "NAME_1", "NAME_2", "NAME_3", "DESCRIPTION", "BILLING.DOC", "SERVICE.DATE", "TO.ADDRESS", "CONSIGNMENT.ID", "ARTICLE.ID",
"BILLED.LENGTH", "BILLED.WIDTH", "BILLED.HEIGHT", "CUBIC.WEIGHT", "BILLED.WEIGHT", "ACTUAL.WEIGHT", "CHARGE.ZONE", "FROM.STATE", "AVG..UNIT.PRICE" , "AMOUNT.EXCL.TAX", "DECLARED.WEIGHT")]
# get the lift service as per uplift card. This covers all thats in the description
bill_cut1$uplift_service <- ifelse(bill_cut1$REGION == "VIC" & bill_cut1$DESCRIPTION == "Parcel Post with Signature", "Regular.VIC",
ifelse(bill_cut1$REGION == "VIC" & bill_cut1$DESCRIPTION == "Express Post with Signature", "Express.VIC",
ifelse(bill_cut1$REGION == "NSW" & bill_cut1$DESCRIPTION == "Parcel Post with Signature", "Regular.NSW",
ifelse(bill_cut1$REGION == "NSW" & bill_cut1$DESCRIPTION == "Express Post with Signature", "Express.NSW",
ifelse(bill_cut1$DESCRIPTION == "Express Post Parcels (BYO up to 5kg)", "EPP_fivekg",
ifelse(bill_cut1$DESCRIPTION == "eParcel Return To Sender", "ep_return_to_sender",
ifelse(bill_cut1$DESCRIPTION == "Express Post eparcel returns", "exp_eparcel_returns",
ifelse(bill_cut1$DESCRIPTION == "eParcel Post Return", "reg_eparcel_returns",
ifelse(bill_cut1$DESCRIPTION == "eParcel Call For Return", "reg_ep_call_for_return",
ifelse(bill_cut1$REGION == "VIC" & bill_cut1$DESCRIPTION == "EPARCEL WINE STD", "Wine.VIC",
ifelse(bill_cut1$REGION == "NSW" & bill_cut1$DESCRIPTION == "EPARCEL WINE STD", "Wine.NSW",
ifelse(bill_cut1$DESCRIPTION == "PACK AND TRACK INTERNATIONAL", "International",
ifelse(bill_cut1$DESCRIPTION == "Express Courier International (eParcel)", "International",
NA)))))))))))))
##### customer code ####
# Function to extract letters before the first "-"
extract_letters <- function(text) {
split_text <- strsplit(as.character(text), "-")[[1]]
return(trimws(split_text[1]))
}
bill_cut1$customer_code <- sapply(bill_cut1$NAME_1, extract_letters)
### create a col to determine if its GST free
# Define a function to apply the logic
is_gst_free <- function(zone) {
ifelse(zone %in% c("NF", "W4", "AAT", "Z1", "Z2", "Z3", "Z4", "Z5", "Z6", "Z7", "Z8", "Z9" ), "Yes", "No")
}
# Apply the function to create the new column
bill_cut1$is_gst_free_zone <- is_gst_free(bill_cut1$CHARGE.ZONE)
