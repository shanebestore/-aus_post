}
else if (weight_category_max == "X2.01kg_to_20kg") {
per_kg_value <- cz_post_feb_eparcel_international_standard[row_index_max, "Per_Kg_2"]
return(charge_value_max_incgst + (per_kg_value * max_weight))
}
else if (weight_category_max %in% c("Up_to_500g", "X501g_to_1kg", "X1.01kg_to_2kg")) {
per_kg_value <- cz_post_feb_eparcel_international_standard[row_index_max, "Per_Kg_1"]
return(charge_value_max_incgst + (per_kg_value * max_weight))
}
else {
return(charge_value_max_incgst)
}
}
output_l_2$base_charge_incgst <- mapply(calculate_final_charge, output_l_2$charge_value_max_incgst, output_l_2$weight_category_max, output_l_2$max_weight, output_l_2$row_index_max)
sapply(output_l_2, class)
#### Base charge fo Express Courier International (eParcel) ####
# using the description here
output_k1 <- subset(output_a, DESCRIPTION  %in% c("Express Courier International (eParcel)"))
#Determine the indexes to use to query the new base charge zone sheet
# find the row and column number to reference against z_c
col_name_max<- as.character(output_k1$weight_category_max)
col_index_max <- unlist(lapply(output_k1$weight_category_max, function(col_name_max) {
which(colnames(cz_post_feb_eparcel_international_express_merch) == col_name_max)
}))
row_name_max<- as.character(output_k1$CHARGE.ZONE)
row_index_max <- unlist(lapply(row_name_max, function(row_name_max) {
index <- which(rownames(cz_post_feb_eparcel_international_express_merch) == row_name_max)
if (length(index) == 0) {
NA
} else {
index
}
}))
output_k_2 <-cbind(output_k1, (cbind(row_index_max, col_index_max)))
#sapply(output_k_2, class)
# query new base charge rate
# Function to extract values from charge zone dataset based on indices
extract_charge_value_max_incgst <- function(row_index_max, col_index_max) {
charge_value <- cz_post_feb_eparcel_international_express_merch[row_index_max, col_index_max]
return(charge_value)
}
output_k_2$charge_value_max_incgst <- mapply(extract_charge_value_max_incgst, output_k_2$row_index_max, output_k_2$col_index_max)
# Function to calculate charge based on charge_value_max_incgst and Per_Kg_#. Also does the calc if  weight_category_max == "X2.01kg_to_20kg"
calculate_final_charge <- function(charge_value_max_incgst, weight_category_max, max_weight, row_index_max) {
if (weight_category_max == "X2.01kg_to_20kg") {
per_kg_value <- cz_post_feb_eparcel_international_express_merch[row_index_max, "Per_Kg"]
return(charge_value_max_incgst + (per_kg_value * (max_weight)))
} else {
return(charge_value_max_incgst)
}
}
output_k_2$base_charge_incgst <- mapply(calculate_final_charge, output_k_2$charge_value_max_incgst, output_k_2$weight_category_max, output_k_2$max_weight, output_k_2$row_index_max)
#### the services we are not changing namely "APGL NZ Express w/Signature", "On Demand Tonight", "On Demand Afternoon"----
#, "Express Post Parcels (BYO up to 5kg)"
subset_and_operate <- function(data) {
subset_data <- subset(data, DESCRIPTION %in% c("APGL NZ Express w/Signature", "On Demand Tonight", "On Demand Afternoon"))
if (nrow(subset_data) > 0) {
subset_data$row_index_max <- NA
subset_data$col_index_max <- NA
subset_data$charge_value_max_incgst <- NA
subset_data$base_charge_incgst <- subset_data$AMOUNT.INCL.TAX
return(subset_data)
} else {
return(NULL)
}
}
# Applying the function to output_a
output_m <- subset_and_operate(output_a)
#### combine all DFs together ######
output_all_services  <- rbind(output_a_2, output_b_2, output_c_2, output_d_2, output_f, output_g, output_h, output_i_2, output_j_2, output_l_2, output_k_2, output_m)
#write.csv(output_all_services, file = "output_all_services.csv")
#### additional mapping ####
# 1.50 mark up for wine tbc
#output_all_services <- output_all_services %>%
#  arrange(CONSIGNMENT.ID, TO.ADDRESS) %>%
# group_by(CONSIGNMENT.ID, TO.ADDRESS) %>%
# mutate(
#    new_base_charge_incgst = base_charge_incgst - 1.50 * (row_number() - 1)
#  ) %>%
#  ungroup()
output_all_services$base_charge_exgst <- ifelse(output_all_services$is_gst_free_zone == 'No',
(output_all_services$base_charge_incgst/ 110) * 100,
output_all_services$base_charge_incgst)
# find the tax amount
output_all_services$base_charge_tax <- output_all_services$base_charge_incgst - output_all_services$base_charge_exgst
# calculate fuel surcharge based on ex gst
# Calculate fuel surcharge only for non-International entries
output_all_services$fuel_surcharge <- ifelse(!(output_all_services$uplift %in% c("International", "APGL", "OnDemand")),
output_all_services$base_charge_exgst * fuel_surcharge_pct,
0)
# Calculate fuel GST based on fuel surcharge
output_all_services$fuel_gst <- ifelse(output_all_services$fuel_surcharge != 0,
output_all_services$fuel_surcharge * gst,
0)
# calculate security management fee
output_all_services$sec_mng_chrg <- ifelse(output_all_services$DESCRIPTION == "Express Post with Signature",
output_all_services$base_charge_exgst * sec_mng_chrg_pct,
NA)
output_all_services$sec_mng_gst <- output_all_services$sec_mng_chrg * gst
##### multiply by customer uplift   ####
# first step is to find the indices
# Initialize vectors to store results
col_index_uplift <- numeric(nrow(output_all_services))
row_index_uplift <- numeric(nrow(output_all_services))
# Iterate over each row
for (i in 1:nrow(output_all_services)) {
# For all rows, find column and row indices
col_name_uplift <- as.character(output_all_services$uplift[i])
col_index_uplift[i] <- which(colnames(customer_uplift_march_24) == col_name_uplift)
row_name_uplift <- as.character(output_all_services$customer_code2[i])
row_index <- which(rownames(customer_uplift_march_24) == row_name_uplift)
# Check if the row index exists, otherwise assign NA
if (length(row_index) == 0) {
row_index_uplift[i] <- NA
} else {
row_index_uplift[i] <- row_index
}
}
output_all_services_2 <-cbind(output_all_services, (cbind(row_index_uplift, col_index_uplift)))
# query to find uplift
extract_charge_value_uplift <- function(row_index_uplift, col_index_uplift) {
if (is.na(row_index_uplift) || is.na(col_index_uplift)) {
return(0)
} else {
charge_value <- customer_uplift_march_24[row_index_uplift, col_index_uplift]
# Check if charge_value is blank or NA, if so, return 0
if (is.na(charge_value) || charge_value == "") {
return(0)
} else {
return(charge_value)
}
}
}
output_all_services_2$charge_value_uplift <- mapply(extract_charge_value_uplift, output_all_services_2$row_index_uplift, output_all_services_2$col_index_uplift)
#write.csv(output_all_services_2, file = "output_all_services.csv")
#### warning cols taken here
# Col to highlight if we are missing weight information or custo has no uplift
# Create a new column 'warnings' in output_all_services_2
output_all_services_2$warnings <- NA
# Condition 1: If charge_value_uplift is blank, NA, or 0
output_all_services_2$warnings <- ifelse(is.na(output_all_services_2$charge_value_uplift) |
output_all_services_2$charge_value_uplift == 0 |
output_all_services_2$charge_value_uplift == "",
"No uplift found. ",
output_all_services_2$warnings)
# Condition 2: If service == 'International' and BILLED.WEIGHT == 0
output_all_services_2$warnings <- ifelse(output_all_services_2$service == 'International' &
output_all_services_2$BILLED.WEIGHT == 0,
paste(output_all_services_2$warnings, "Declared weight used. "),
output_all_services_2$warnings)
# Condition 3: If service is not one of the specified values and cubic_weight == 0 & BILLED.WEIGHT == 0
output_all_services_2$warnings <- ifelse(!(output_all_services_2$service %in% c('International',
'reg_ep_call_for_return',
'ep_return_to_sender',
'reg_eparcel_returns')) &
output_all_services_2$cubic_weight == 0 &
output_all_services_2$BILLED.WEIGHT == 0,
paste(output_all_services_2$warnings, "Declared weight used. "),
output_all_services_2$warnings)
# Condition 4: If weight_category_max is NA or 0
output_all_services_2$warnings <- ifelse(is.na(output_all_services_2$weight_category_max) |
output_all_services_2$weight_category_max == 0,
paste(output_all_services_2$warnings, "no weight detected so 0 charge applied"),
output_all_services_2$warnings)
# Condition 5: If weight_category_max is "Above_22kg_for_Wine"
output_all_services_2$warnings <- ifelse(output_all_services_2$weight_category_max == "Above_22kg_for_Wine",
paste(output_all_services_2$warnings, "Over 22kg for wine. "),
output_all_services_2$warnings)
# Condition 6: If CHARGE.ZONE is blank or NA
output_all_services_2$warnings <- ifelse(is.na(output_all_services_2$CHARGE.ZONE) |
output_all_services_2$CHARGE.ZONE == "",
paste(output_all_services_2$warnings, "No charge zone detected. "),
output_all_services_2$warnings)
#output_all_services_2$warnings <- ifelse(is.na(output_all_services_2$corresponding_value) |
#                                           output_all_services_2$corresponding_value == "custo code not found",
#                                         "custo code not found",
#                                         output_all_services_2$warnings)
#### multiply base by uplift ####
# Incgst Convert charge_value_uplift to numeric, handling NA values
output_all_services_2$charge_value_uplift_numeric_incgst <- ifelse(is.na(output_all_services_2$charge_value_uplift) | is.na(output_all_services_2$base_charge_exgst),
NA,
as.numeric(sub("%", "", output_all_services_2$charge_value_uplift)))
#exgst
output_all_services_2$charge_value_uplift_numeric_exgst <- ifelse(is.na(output_all_services_2$charge_value_uplift) | is.na(output_all_services_2$base_charge_exgst),
NA,
as.numeric(sub("%", "", output_all_services_2$charge_value_uplift)))
# Incgst Convert base_charge_exgst to numeric, handling NA values
#exgst
output_all_services_2$charge_value_max_exgst_numeric <- ifelse(is.na(output_all_services_2$charge_value_uplift) | is.na(output_all_services_2$base_charge_exgst),
NA,
as.numeric(gsub("[^0-9.]", "", output_all_services_2$base_charge_exgst)))
# Incgst Calculate the percentage of base_charge_exgst, handling NA values
#exgst
output_all_services_2$uplift_figure_exgst <- ifelse(is.na(output_all_services_2$charge_value_uplift_numeric_exgst) | is.na(output_all_services_2$charge_value_max_exgst_numeric),
NA,
(output_all_services_2$charge_value_uplift_numeric_exgst / 100) * output_all_services_2$charge_value_max_exgst_numeric)
#  Incgst Filter out NA and non-numeric values before performing addition
#exgst
output_all_services_2$charge_to_custo_exgst <- ifelse(is.na(output_all_services_2$charge_value_max_exgst_numeric) | is.na(output_all_services_2$uplift_figure_exgst) | !is.numeric(output_all_services_2$charge_value_max_exgst_numeric) | !is.numeric(output_all_services_2$uplift_figure_exgst),
NA,
output_all_services_2$charge_value_max_exgst_numeric + output_all_services_2$uplift_figure_exgst)
# fuel surcharge based on the uplift
# calculate fuel surcharge based on mark up
# Calculate fuel surcharge only for non-International entries
output_all_services_2$fuel_surcharge_uplifted <- ifelse(!(output_all_services_2$uplift %in% c("International", "APGL", "OnDemand")),
output_all_services_2$charge_to_custo_exgst * fuel_surcharge_pct,
0)
# Calculate fuel GST based on fuel surcharge
output_all_services_2$fuel_surchrg_uplift_gst <- ifelse(output_all_services_2$fuel_surcharge_uplifted != 0,
output_all_services_2$fuel_surcharge_uplifted * gst,
0)
# calculate security management fee
output_all_services_2$sec_mng_chrg_uplifted <- ifelse(output_all_services_2$DESCRIPTION == "Express Post with Signature",
output_all_services_2$charge_to_custo_exgst * sec_mng_chrg_pct,
NA)
output_all_services_2$sec_mng_uplifted_gst <- output_all_services_2$sec_mng_chrg_uplifted * gst
# update table name
output_all_services_2 <- output_all_services_2
#output_all_services_2 <- subset(output_all_services_2 , ARTICLE.ID %in% c('ET236199765AU'))
##### write to CSV ####
write.csv(output_all_services_2, file = "output_all_services_2.csv")
#### Generate billing doc output file (line by line comparison) ####
# join the selected columns onto the billing doc in the correct places
# this creates the billing_doc_output which is a just the original output withe the new columns added
# rename the article_id
names(bill)[names(bill) == "ARTICLE.ID"] <- "article_id"
names(output_all_services_2)[names(output_all_services_2) == "ARTICLE.ID"] <- "article_id"
# Specify columns to merge from output_all_services_2
merge_cols <- c( "service", "uplift", "DESCRIPTION", "BILLING.DOC", "article_id",
"base_charge_incgst", "base_charge_exgst", "base_charge_tax", "charge_value_uplift", "uplift_figure_exgst",
"charge_to_custo_exgst", "cubic_weight", "max_weight", "fuel_surcharge","fuel_surcharge_uplifted", "fuel_gst","fuel_surchrg_uplift_gst", "sec_mng_chrg", "sec_mng_chrg_uplifted", "sec_mng_gst", "sec_mng_uplifted_gst",
"over_max_limits_fee", "weight_category_max", "warnings", "is_gst_free_zone")
#"customer_code2", "customer_code",
selected_output_all_services_2 <- output_all_services_2[, merge_cols]
# Merge bill and selected columns from output_all_services_2 by the unique identifier
billing_doc_output <- merge(bill, selected_output_all_services_2, by = c("article_id", "BILLING.DOC", "DESCRIPTION"), all = TRUE)
# Insert new columns after "AVG..UNIT.PRICE"
avg_unit_price_index <- which(names(billing_doc_output ) == "AMOUNT.INCL.TAX")
billing_doc_output  <- cbind(billing_doc_output [, 1:avg_unit_price_index],
billing_doc_output [, c("base_charge_incgst","base_charge_exgst", "base_charge_tax", "charge_value_uplift", "uplift_figure_exgst", "charge_to_custo_exgst", "warnings")],
billing_doc_output [, (avg_unit_price_index + 1):ncol(billing_doc_output )])
# Insert new columns after "FUEL.GST"
fuel_gst_index <- which(names(billing_doc_output ) == "FUEL.GST")
billing_doc_output  <- cbind(billing_doc_output [, 1:fuel_gst_index  ],
billing_doc_output [, c("fuel_surcharge" ,"fuel_gst", "sec_mng_chrg", "sec_mng_gst", "over_max_limits_fee")],
billing_doc_output [, (fuel_gst_index  + 1):ncol(billing_doc_output )])
# Insert new columns after "BILLED.WEIGHT"
billed_weight_index <- which(names(billing_doc_output ) == "BILLED.WEIGHT")
billing_doc_output  <- cbind(billing_doc_output [, 1:billed_weight_index  ],
billing_doc_output [, c("cubic_weight", "max_weight", "weight_category_max", "service", "uplift")],
billing_doc_output [, (billed_weight_index  + 1):ncol(billing_doc_output )])
# Quick descrepancy check for testing purposes
discrepancy <- function(billing_doc_output) {
# Check if the rounded value of AMOUNT.EXCL.TAX is equal to base_charge_exgst
billing_doc_output$discrepancy <- ifelse(
round(billing_doc_output$AMOUNT.INCL.TAX, 2) == round(billing_doc_output$base_charge_incgst, 2),
"no",
"yes"
)
return(billing_doc_output)
}
billing_doc_output <- discrepancy(billing_doc_output)
# remove duplicates and reorder
desired_order <- c("article_id", "BILLING.DOC", "DESCRIPTION", "CUSTOMER", "NAME_1", "NAME_2", "NAME_3", "STREET", "CITY", "REGION", "POST.CODE",
"TELEPHONE", "FAX.NUMBER", "MAILING.STATEMENT.NO.", "ASSIGNMENT.NO.", "SERVICE.DATE", "WORK.CENTRE", "WORK.CENTRE.NAME", "CUSTOMER.REF", "CUSTOMER.REFDOC",
"ITEM", "MATERIAL", "QTY", "AVG..UNIT.PRICE", "AMOUNT.INCL.TAX", "base_charge_incgst", "base_charge_exgst", "discrepancy", "base_charge_tax", "charge_value_uplift",
"uplift_figure_exgst", "charge_to_custo_exgst", "warnings", "TAX.CODE", "TAX.AMOUNT", "AMOUNT.EXCL.TAX", "INVOICE.TOTAL", "TOTAL.QTY", "BILLING.CURRENCY",
"EXCHANGE.RATE", "LOCAL.CURRENCY", "FUEL.SURCHARGE..", "FUEL.SURCHARGE.DISC", "FUEL.GST", "fuel_surcharge","fuel_surcharge_uplifted", "fuel_gst","fuel_surchrg_uplift_gst", "sec_mng_chrg", "sec_mng_chrg_uplifted", "sec_mng_gst", "sec_mng_uplifted_gst",
"over_max_limits_fee", "MHS.FEE", "MHS.DISCOUNT", "MHS.GST", "SMC.FEE", "SMC.DISCOUNT", "SMC.GST", "INTL.SURCHARGE", "INTL.SURCHARGE.MANIFEST", "INVOICE.NO",
"BILLING.DATE", "SALES.ORDER", "SALES.ORDER.ITEM", "PAYER", "PAYER.NAME", "CONSIGNMENT.ID", "LODGEMENT.DATE", "ACTUAL.WEIGHT", "ACTUAL.UNIT", "ACTUAL.LENGTH",
"ACTUAL.WIDTH", "ACTUAL.HEIGHT", "ACTUAL.UNIT.TYPE", "DECLARED.WEIGHT", "DECLARED.UNIT", "DECLARED.LENGTH", "DECLARED.WIDTH", "DECLARED.HEIGHT",
"DECLARED.UNIT.TYPE", "FROM.NAME", "FROM.ADDRESS", "FROM.CITY", "FROM.STATE", "FROM.POSTAL.CODE", "FROM.EMAIL.ADDRESS", "TO.NAME", "TO.ADDRESS", "TO.CITY",
"TO.STATE", "TO.POSTAL.CODE", "TO.EMAIL.ADDRESS", "RECORD.COUNT", "TOT.AMOUNT.EXCL.TAX", "CUST.REF.1", "CUST.REF.2", "BILLED.LENGTH", "BILLED.WIDTH",
"BILLED.HEIGHT", "CUBIC.WEIGHT", "BILLED.WEIGHT", "cubic_weight", "max_weight", "weight_category_max", "service", "uplift", "INTERNATIONAL.SURCHARGE.RATE",
"CHARGE.CODE", "CHARGE.ZONE", "ATO.DESPATCH.REFERENCE.NUMBER", "RECEIVING.COUNTRY", "SIGNATURE.ON.DELIVERY", "TRANSIT.COVER", "CAPTURE.ID",
"UNMANIFESTED.ARTICLE", "RETURN.TO.SENDER", "LODGEMENT.ZONE", "DESTINATION.ZONE", "CUST.REF.3", "WINE...ALCOHOL", "PEAK.FEE", "PEAK.FEE.DISCOUNT",
"PEAK.FEE.GST", "OVER.MAX.LIMITS.FEE", "OVER.MAX.LIMITS.FEE.DISCOUNT", "OVER.MAX.LIMITS.FEE.GST", "INTERNATIONAL.UNMANIFESTED.FEE", "customer_code2",
"customer_code", "is_gst_free_zone")
# Reorder the columns in final_output
billing_doc_output <- billing_doc_output [, desired_order]
#### sum for the aggregation lines ----
# Calculate the sum of fuel_surcharge_uplifted per BILLING.DOC
fuel_surcharge_per_billing_doc <- billing_doc_output %>%
filter(is_gst_free_zone == 'No') %>%
group_by(BILLING.DOC) %>%
summarise(total_fuel_surcharge = sum(fuel_surcharge_uplifted, na.rm = TRUE))
# Merge the total_fuel_surcharge back to the original dataframe
billing_doc_output <- left_join(billing_doc_output, fuel_surcharge_per_billing_doc, by = "BILLING.DOC")
# Update base_charge_exgst with the total fuel surcharge where DESCRIPTION is "AP Parcels Domestic Fuel Surcharge"
billing_doc_output <- billing_doc_output %>%
mutate(base_charge_exgst = ifelse(DESCRIPTION == "AP Parcels Domestic Fuel Surcharge",
total_fuel_surcharge,
base_charge_exgst)) %>%
select(-total_fuel_surcharge)
#### sum the fuel_surcharg tax free ---
fuel_surcharge_per_billing_doc <- billing_doc_output %>%
filter(is_gst_free_zone == 'Yes') %>%
group_by(BILLING.DOC) %>%
summarise(total_fuel_surcharge = sum(fuel_surcharge_uplifted, na.rm = TRUE))
billing_doc_output <- left_join(billing_doc_output, fuel_surcharge_per_billing_doc, by = "BILLING.DOC")
billing_doc_output <- billing_doc_output %>%
mutate(base_charge_exgst = ifelse(DESCRIPTION == "AP Parcels Domestic Fuel Surchg Tax Free",
total_fuel_surcharge,
base_charge_exgst)) %>%
select(-total_fuel_surcharge)
#### sum the security management fee ----
sec_mng_chrg_per_billing_doc <- billing_doc_output %>%
filter(is_gst_free_zone == 'No') %>%
group_by(BILLING.DOC) %>%
summarise(total_sec_mng_chrg = sum(sec_mng_chrg_uplifted, na.rm = TRUE))
billing_doc_output <- left_join(billing_doc_output, sec_mng_chrg_per_billing_doc, by = "BILLING.DOC")
billing_doc_output <- billing_doc_output %>%
mutate(base_charge_exgst = ifelse(DESCRIPTION == "AP Security Mgt Charge",
total_sec_mng_chrg,
base_charge_exgst)) %>%
select(-total_sec_mng_chrg)
#### sum the security AP Security Mgt Charge Tax Free ----
sec_mng_chrg_per_billing_doc <- billing_doc_output %>%
filter(is_gst_free_zone == 'Yes') %>%
group_by(BILLING.DOC) %>%
summarise(total_sec_mng_chrg = sum(sec_mng_chrg_uplifted, na.rm = TRUE))
billing_doc_output <- left_join(billing_doc_output, sec_mng_chrg_per_billing_doc, by = "BILLING.DOC")
billing_doc_output <- billing_doc_output %>%
mutate(base_charge_exgst = ifelse(DESCRIPTION == "AP Security Mgt Charge Tax Free",
total_sec_mng_chrg,
base_charge_exgst)) %>%
select(-total_sec_mng_chrg)
#### bring across the services that we are not touching ----
billing_doc_output$base_charge_incgst <- ifelse(billing_doc_output$DESCRIPTION %in% c(
"More to Pay",
"On Demand Return to Sender",
"STC Parcels Domestic Fuel Surcharge",
"Duties and Taxes Admin Fee (DDP)",
"Delivered Duty Paid",
"AP International Line Haul Surcharge",
"International  Returns AIR",
"Lodgement Management Fee",
"Unmanifest Article"),
billing_doc_output$AMOUNT.INCL.TAX,
billing_doc_output$base_charge_incgst)
billing_doc_output$base_charge_exgst <- ifelse(billing_doc_output$DESCRIPTION %in% c(
"More to Pay",
"On Demand Return to Sender",
"STC Parcels Domestic Fuel Surcharge",
"Duties and Taxes Admin Fee (DDP)",
"Delivered Duty Paid",
"AP International Line Haul Surcharge",
"International  Returns AIR",
"Lodgement Management Fee",
"Unmanifest Article"),
billing_doc_output$AMOUNT.EXCL.TAX,
billing_doc_output$base_charge_exgst)
# quick fix for charge to customer. Will have to revise this down the line
#billing_doc_output$avg_unit_price_charge_to_custo_ex_gst <- billing_doc_output$QTY * billing_doc_output$charge_to_custo_exgst
max_charge <- pmax(billing_doc_output$charge_to_custo_exgst, billing_doc_output$base_charge_exgst, na.rm = TRUE)
max_charge[is.na(max_charge)] <- 0
billing_doc_output$charge_to_custo_exgst <- max_charge
billing_doc_output$avg_unit_price_charge_to_custo_ex_gst <- billing_doc_output$QTY * billing_doc_output$charge_to_custo_exgst
# generate the file path
output_folder <- file.path(getwd(), paste0("output_billing_dates_", predefined_text))
if (!file.exists(output_folder)) {
dir.create(output_folder, recursive = TRUE)
}
file_name <- paste0("billing_doc_output_", predefined_text, ".csv")
full_file_path <- file.path(output_folder, file_name)
write.csv(billing_doc_output, file = full_file_path, row.names = FALSE)
#### aggregation block ----
# this will be used to generate the sums and the ap_post_supply will be taken from here
#create international_charge_zone
billing_doc_output$intl_charge_zone <- billing_doc_output$CHARGE.ZONE
# Produce the output for in the right structure this will be the basis for the aggregation and calculation files
desired_order <- c(
"customer_code", "NAME_1", "MAILING.STATEMENT.NO.", "ASSIGNMENT.NO." , "SERVICE.DATE" , "DESCRIPTION",
"BILLING.DATE", "CONSIGNMENT.ID", "article_id", "LODGEMENT.DATE", "ACTUAL.WEIGHT", "ACTUAL.UNIT", "ACTUAL.LENGTH",
"ACTUAL.WIDTH", "ACTUAL.HEIGHT", "ACTUAL.UNIT.TYPE",
"DECLARED.UNIT.TYPE", "DECLARED.WEIGHT",	"DECLARED.UNIT",	"DECLARED.LENGTH",	"DECLARED.WIDTH",
"DECLARED.HEIGHT",	"DECLARED.UNIT.TYPE", "FROM.NAME", 	"FROM.ADDRESS",	"FROM.CITY",	"FROM.STATE",	"FROM.POSTAL.CODE",
"TO.NAME",	"TO.ADDRESS",	"TO.CITY",	"TO.STATE",	"TO.POSTAL.CODE", "CUST.REF.1",	"CUST.REF.2",	"BILLED.LENGTH", "BILLED.WIDTH",
"BILLED.HEIGHT", "CUBIC.WEIGHT", "BILLED.WEIGHT", "CHARGE.CODE", "RECEIVING.COUNTRY", "intl_charge_zone", "CHARGE.ZONE", "service", "QTY", "AMOUNT.INCL.TAX",
"AMOUNT.EXCL.TAX", "base_charge_incgst", "base_charge_exgst", "uplift_figure_exgst", "charge_to_custo_exgst", "fuel_surcharge", "FUEL.SURCHARGE..",
"SMC.FEE", "sec_mng_chrg", "over_max_limits_fee", "BILLING.DOC", "is_gst_free_zone"#, "OVER.MAX.LIMITS.FEE"
)
# Reorder the columns in final_output
#billing_doc_output <- billing_doc_output [, desired_order]
#### build ap_post_supply ----
desired_order <- c(
"customer_code", "NAME_1", "MAILING.STATEMENT.NO.", "ASSIGNMENT.NO.", "SERVICE.DATE", "DESCRIPTION",
"BILLING.DATE", "CONSIGNMENT.ID", "article_id", "LODGEMENT.DATE", "ACTUAL.WEIGHT", "ACTUAL.UNIT", "ACTUAL.LENGTH",
"ACTUAL.WIDTH", "ACTUAL.HEIGHT", "ACTUAL.UNIT.TYPE", "DECLARED.WEIGHT",	"DECLARED.UNIT",	"DECLARED.LENGTH",	"DECLARED.WIDTH",
"DECLARED.HEIGHT",	"DECLARED.UNIT.TYPE", "FROM.NAME", 	"FROM.ADDRESS",	"FROM.CITY",	"FROM.STATE",	"FROM.POSTAL.CODE",
"TO.NAME",	"TO.ADDRESS",	"TO.CITY",	"TO.STATE",	"TO.POSTAL.CODE", "CUST.REF.1",	"CUST.REF.2",	"BILLED.LENGTH", "BILLED.WIDTH",
"BILLED.HEIGHT", "CUBIC.WEIGHT", "BILLED.WEIGHT", "CHARGE.CODE", "intl_charge_zone", "RECEIVING.COUNTRY", "CHARGE.ZONE", "service", "QTY",
"avg_unit_price_charge_to_custo_ex_gst", "charge_to_custo_exgst")
# Reorder the columns in final_output.
# this is needed for the consoladated
ap_post_supply <- billing_doc_output [, desired_order]
# Create a new folder in the specified directory
folder_name <- paste0("ap_post_supply_", predefined_text, ".csv")
# Replace invalid characters in folder name
clean_folder_name <- gsub("[^A-Za-z0-9._-]", "_", folder_name)
new_folder_path <- file.path("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post", clean_folder_name)
dir.create(new_folder_path, showWarnings = FALSE)
# Get unique values of NAME_1
unique_names <- unique(billing_doc_output$NAME_1)
# Loop through each unique NAME_1 value
for (name in unique_names) {
# Subset data frame for current NAME_1 value
subset_data <- billing_doc_output[billing_doc_output$NAME_1 == name, ]
# Reorder the columns in final_output
subset_data <- subset_data[, desired_order]
# Replace invalid characters in name
clean_name <- gsub("[^A-Za-z0-9._-]", "_", name)
# Generate file name with folder path
file_name <- file.path(new_folder_path, paste0("ap_post_supply_", predefined_text, "_", clean_name, ".csv"))
# Write subset to CSV
write.csv(subset_data, file = file_name, row.names = FALSE)
}
##### ap post supply consolodated ###
output_folder <- file.path(getwd(), paste0("output_billing_dates_", predefined_text))
if (!file.exists(output_folder)) {
dir.create(output_folder, recursive = TRUE)
}
file_name <- paste0("ap_post_supply_consolidated", predefined_text, ".csv")
full_file_path <- file.path(output_folder, file_name)
write.csv(ap_post_supply, file = full_file_path, row.names = FALSE)
######## just the custo and description ########
summary_by_description <- billing_doc_output %>%
filter(!(DESCRIPTION %in% c("AP Parcels Domestic Fuel Surcharge",
"AP Security Mgt Charge",
"AP Parcels Domestic Fuel Surchg Tax Free",
"AP Security Mgt Charge Tax Free",
"STC Parcels Domestic Fuel Surcharge",
"Over Maximum Limits Fee"))) %>%
group_by(NAME_1, DESCRIPTION) %>%
summarize(
count = n(),
sum_of_AMOUNT.INCL.TAX = sum(AMOUNT.INCL.TAX, na.rm = TRUE),
sum_of_base_charge_incgst = sum(base_charge_incgst, na.rm = TRUE),
sum_of_AMOUNT.EXCL.TAX = sum(AMOUNT.EXCL.TAX, na.rm = TRUE),
sum_of_base_charge_exgst = sum(base_charge_exgst, na.rm = TRUE),
sum_of_uplift_figure_exgst = sum(uplift_figure_exgst, na.rm = TRUE),
sum_of_charge_to_custo_exgst = sum(charge_to_custo_exgst, na.rm = TRUE),
sum_of_FUEL.SURCHARGE.. = sum(FUEL.SURCHARGE.., na.rm = TRUE),
sum_of_fuel_surcharge = sum(fuel_surcharge, na.rm = TRUE),
sum_of_fuel_surcharge_uplifted = sum(fuel_surcharge_uplifted, na.rm = TRUE),
sum_of_SMC.FEE = sum(SMC.FEE, na.rm = TRUE),
sum_of_sec_mng_chrg = sum(sec_mng_chrg, na.rm = TRUE),
sum_of_sec_mng_chrg_uplifted= sum(sec_mng_chrg_uplifted, na.rm = TRUE),
#    sum_of_OVER.MAX.LIMITS.FEE = sum(OVER.MAX.LIMITS.FEE, na.rm = TRUE),
sum_of_over_max_limits_fee = sum(over_max_limits_fee, na.rm = TRUE)
)
print(summary_by_description)
output_folder <- file.path(getwd(), paste0("output_billing_dates_", predefined_text))
if (!file.exists(output_folder)) {
dir.create(output_folder, recursive = TRUE)
}
file_name <- paste0("summary_by_custo_&_description_", predefined_text, ".csv")
full_file_path <- file.path(output_folder, file_name)
write.csv(summary_by_description, file = full_file_path, row.names = FALSE)
######## just the description ########
summary_by_description <- billing_doc_output %>%
filter(!(DESCRIPTION %in% c("AP Parcels Domestic Fuel Surcharge",
"AP Security Mgt Charge",
"AP Parcels Domestic Fuel Surchg Tax Free",
"AP Security Mgt Charge Tax Free",
"STC Parcels Domestic Fuel Surcharge",
"Over Maximum Limits Fee"))) %>%
group_by(DESCRIPTION) %>%
summarize(
count = n(),
sum_of_AMOUNT.INCL.TAX = sum(AMOUNT.INCL.TAX, na.rm = TRUE),
sum_of_base_charge_incgst = sum(base_charge_incgst, na.rm = TRUE),
sum_of_AMOUNT.EXCL.TAX = sum(AMOUNT.EXCL.TAX, na.rm = TRUE),
sum_of_base_charge_exgst = sum(base_charge_exgst, na.rm = TRUE),
sum_of_uplift_figure_exgst = sum(uplift_figure_exgst, na.rm = TRUE),
sum_of_charge_to_custo_exgst = sum(charge_to_custo_exgst, na.rm = TRUE),
sum_of_FUEL.SURCHARGE.. = sum(FUEL.SURCHARGE.., na.rm = TRUE),
sum_of_fuel_surcharge = sum(fuel_surcharge, na.rm = TRUE),
sum_of_fuel_surcharge_uplifted = sum(fuel_surcharge_uplifted, na.rm = TRUE),
sum_of_SMC.FEE = sum(SMC.FEE, na.rm = TRUE),
sum_of_sec_mng_chrg = sum(sec_mng_chrg, na.rm = TRUE),
sum_of_sec_mng_chrg_uplifted= sum(sec_mng_chrg_uplifted, na.rm = TRUE),
#    sum_of_OVER.MAX.LIMITS.FEE = sum(OVER.MAX.LIMITS.FEE, na.rm = TRUE),
sum_of_over_max_limits_fee = sum(over_max_limits_fee, na.rm = TRUE)
)
print(summary_by_description)
output_folder <- file.path(getwd(), paste0("output_billing_dates_", predefined_text))
if (!file.exists(output_folder)) {
dir.create(output_folder, recursive = TRUE)
}
file_name <- paste0("summary_by_description_", predefined_text, ".csv")
full_file_path <- file.path(output_folder, file_name)
write.csv(summary_by_description, file = full_file_path, row.names = FALSE)
print("ran")  # Print "ran" after the result
}
})
# Render the summary text
output$summary <- renderPrint({
user_inputs <- user_data()
cat("User Inputs:\n")
cat("Fuel Surcharge:", user_inputs$fuel_surcharge, "\n")
cat("Force Majeure Fee:", user_inputs$force_majeure_fee, "\n")
cat("Peak Fee:", user_inputs$peak_fee, "\n")
})
# Custom output
output$custom_output <- renderPrint({
user_inputs <- user_data()
# "ran" will be printed after the result
})
}
# Run the application
shinyApp(ui = ui, server = server)
