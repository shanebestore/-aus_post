"Delivered Duty Paid",
"AP International Line Haul Surcharge",
"International  Returns AIR",
"Lodgement Management Fee",
"Unmanifest Article"),
billing_doc_output$AMOUNT.EXCL.TAX,
billing_doc_output$base_charge_exgst)
#### 3.e get final charge per customer -----
#billing_doc_output$avg_unit_price_charge_to_custo_ex_gst <- billing_doc_output$QTY * billing_doc_output$charge_to_custo_exgst
max_charge <- pmax(billing_doc_output$charge_to_custo_exgst, billing_doc_output$base_charge_exgst, na.rm = TRUE)
max_charge[is.na(max_charge)] <- 0
billing_doc_output$charge_to_custo_exgst <- max_charge
billing_doc_output$avg_unit_price_charge_to_custo_ex_gst <- billing_doc_output$QTY * billing_doc_output$charge_to_custo_exgst
#### 3.f generate the file path ----
output_folder <- file.path(getwd(), paste0("output_billing_dates_", predefined_text))
if (!file.exists(output_folder)) {
dir.create(output_folder, recursive = TRUE)
}
file_name <- paste0("billing_doc_output_", predefined_text, ".csv")
full_file_path <- file.path(output_folder, file_name)
#write.csv(billing_doc_output, file = full_file_path, row.names = FALSE)
#### aggregation block ----
# this will be used to generate the sums and the ap_post_supply will be taken from here
#create international_charge_zone
billing_doc_output$intl_charge_zone <- billing_doc_output$CHARGE.ZONE
#### 3.g Redefine the services for the supply file ----
# Restructuring to define the services for the outputs
billing_doc_output$Service <- ""
# Restructuring to define the services for the outputs
billing_doc_output$Service <- ""
# Mapping descriptions to services
billing_doc_output$Service[billing_doc_output$DESCRIPTION == "Delivered Duty Paid" |
billing_doc_output$DESCRIPTION == "Over Maximum Limits Fee"]               <- "Additional Charges"
billing_doc_output$Service[billing_doc_output$DESCRIPTION == "Duties and Taxes Admin Fee (DDP)"]        <- "Add'l Charges - DDP"
billing_doc_output$Service[billing_doc_output$DESCRIPTION == "APGL NZ Express w/Signature"]             <- "APGL NZ Express"
billing_doc_output$Service[billing_doc_output$DESCRIPTION == "Imprint Large Charge Letters Regular" |
billing_doc_output$DESCRIPTION == "Imprint Large Charge Letters Priority" |
billing_doc_output$DESCRIPTION == "Imprint Small Charge Letters Regular"]  <- "ELMS"
billing_doc_output$Service[billing_doc_output$DESCRIPTION == "Express Post with Signature"|
billing_doc_output$DESCRIPTION == "AP Security Mgt Charge" |
billing_doc_output$DESCRIPTION == "AP Security Mgt Charge Tax Free"|
billing_doc_output$DESCRIPTION == "Express Post Parcels (BYO up to 5kg)"]  <- "eParcel Express"
billing_doc_output$Service[billing_doc_output$DESCRIPTION == "Express Post eparcel returns" ]           <- "eParcel Express Returns"
billing_doc_output$Service[billing_doc_output$DESCRIPTION == "PACK AND TRACK INTERNATIONAL"|
billing_doc_output$DESCRIPTION == "Express Courier International (eParcel)"] <- "eParcel International"
billing_doc_output$Service[billing_doc_output$DESCRIPTION == "AP International Line Haul Surcharge"]    <- "eParcel International Line Haul Surcharge"
billing_doc_output$Service[billing_doc_output$DESCRIPTION == "International Returns Express"|
billing_doc_output$DESCRIPTION == "International Returns AIR"]           <- "eParcel International Returns"  # check here for typo
billing_doc_output$Service[billing_doc_output$DESCRIPTION == "Parcel Post with Signature"|
billing_doc_output$DESCRIPTION == "AP Parcels Domestic Fuel Surcharge" |
billing_doc_output$DESCRIPTION == "AP Parcels Domestic Fuel Surchg Tax Free"|
billing_doc_output$DESCRIPTION == "AP Manual Handling Surcharge"|
billing_doc_output$DESCRIPTION == "Weekend & Public Holiday Collections"|
billing_doc_output$DESCRIPTION == "eParcel"|
billing_doc_output$DESCRIPTION == "Underpaid Parcels Charges"|
billing_doc_output$DESCRIPTION == "AP Manual Handling Surcharge Tax Free"] <- "eParcel Regular"
billing_doc_output$Service[billing_doc_output$DESCRIPTION == "eParcel Return To Sender" |
billing_doc_output$DESCRIPTION == "eParcel Post Return" |
billing_doc_output$DESCRIPTION == "Local Pickup and Delivery Services"|
billing_doc_output$DESCRIPTION == "Return Paid Parcels Local"|
billing_doc_output$DESCRIPTION == "eParcel Call For Return"|
billing_doc_output$DESCRIPTION == "Lodgement Management Fee" |
billing_doc_output$DESCRIPTION == "More to Pay" |
billing_doc_output$DESCRIPTION == "Unmanifest Article" |
billing_doc_output$DESCRIPTION == "Return To Sender Parcels" ]             <- "eParcel Regular Returns"
billing_doc_output$Service[billing_doc_output$DESCRIPTION == "EPARCEL WINE STD"] <- "eParcel Wine"
billing_doc_output$Service[billing_doc_output$DESCRIPTION == "On Demand Return to Sender" |
billing_doc_output$DESCRIPTION == "STC Parcels Domestic Fuel Surcharge" |
billing_doc_output$DESCRIPTION == "On Demand Afternoon" |
billing_doc_output$DESCRIPTION == "On Demand Tonight" |
billing_doc_output$DESCRIPTION == "STC Sundry" |
billing_doc_output$DESCRIPTION == "STC EMS"]                               <- "StarTrack OnDemand"
#### 3.h Remove the compensation rows ----
#Remove rows where DESCRIPTION is blank
billing_doc_output <- billing_doc_output[!is.na(billing_doc_output$DESCRIPTION) & billing_doc_output$DESCRIPTION != "", ]
# Produce the output for in the right structure this will be the basis for the aggregation and calculation files
# need to determine if we remove the below
desired_order <- c(
"customer_code", "NAME_1", "MAILING.STATEMENT.NO.", "ASSIGNMENT.NO." , "SERVICE.DATE" , "DESCRIPTION",
"BILLING.DATE", "CONSIGNMENT.ID", "ARTICLE.ID", "LODGEMENT.DATE", "ACTUAL.WEIGHT", "ACTUAL.UNIT", "ACTUAL.LENGTH",
"ACTUAL.WIDTH", "ACTUAL.HEIGHT", "ACTUAL.UNIT.TYPE",
"DECLARED.UNIT.TYPE", "DECLARED.WEIGHT",	"DECLARED.UNIT",	"DECLARED.LENGTH",	"DECLARED.WIDTH",
"DECLARED.HEIGHT",	"DECLARED.UNIT.TYPE", "FROM.NAME", 	"FROM.ADDRESS",	"FROM.CITY",	"FROM.STATE",	"FROM.POSTAL.CODE",
"TO.NAME",	"TO.ADDRESS",	"TO.CITY",	"TO.STATE",	"TO.POSTAL.CODE", "CUST.REF.1",	"CUST.REF.2",	"BILLED.LENGTH", "BILLED.WIDTH",
"BILLED.HEIGHT", "CUBIC.WEIGHT", "BILLED.WEIGHT", "CHARGE.CODE", "RECEIVING.COUNTRY", "intl_charge_zone", "CHARGE.ZONE", "Service", "QTY", "AMOUNT.INCL.TAX",
"AMOUNT.EXCL.TAX", "base_charge_incgst", "base_charge_exgst", "uplift_figure_exgst", "charge_to_custo_exgst", "fuel_surcharge", "FUEL.SURCHARGE..",
"SMC.FEE", "sec_mng_chrg", "over_max_limits_fee", "BILLING.DOC", "is_gst_free_zone"#, "OVER.MAX.LIMITS.FEE"
)
# Reorder the columns in final_output
#billing_doc_output <- billing_doc_output [, desired_order]
#### 3.i reorder and rename columns for ap_post_supply ----
desired_order <- c(
"customer_code", "NAME_1", "MAILING.STATEMENT.NO.", "ASSIGNMENT.NO.", "SERVICE.DATE", "DESCRIPTION",
"BILLING.DATE", "CONSIGNMENT.ID", "ARTICLE.ID", "LODGEMENT.DATE", "ACTUAL.WEIGHT", "ACTUAL.UNIT", "ACTUAL.LENGTH",
"ACTUAL.WIDTH", "ACTUAL.HEIGHT", "ACTUAL.UNIT.TYPE", "DECLARED.WEIGHT",	"DECLARED.UNIT",	"DECLARED.LENGTH",	"DECLARED.WIDTH",
"DECLARED.HEIGHT",	"DECLARED.UNIT.TYPE", "FROM.NAME", 	"FROM.ADDRESS",	"FROM.CITY",	"FROM.STATE",	"FROM.POSTAL.CODE",
"TO.NAME",	"TO.ADDRESS",	"TO.CITY",	"TO.STATE",	"TO.POSTAL.CODE", "CUST.REF.1",	"CUST.REF.2",	"BILLED.LENGTH", "BILLED.WIDTH",
"BILLED.HEIGHT", "CUBIC.WEIGHT", "BILLED.WEIGHT", "CHARGE.CODE", "intl_charge_zone", "RECEIVING.COUNTRY", "CHARGE.ZONE", "Service", "QTY",
"avg_unit_price_charge_to_custo_ex_gst", "charge_to_custo_exgst")
# Reorder the columns in final_output.
# this is needed for the consoladated
ap_post_supply <- billing_doc_output [, desired_order]
# new column names as per desired output
new_col_names <- c("Code", "NAME_1", "MAILING STATEMENT NO.", "ASSIGNMENT NO.", "SERVICE DATE", "DESCRIPTION", "BILLING DATE", "CONSIGNMENT ID",
"ARTICLE ID", "LODGEMENT DATE", "ACTUAL WEIGHT", "ACTUAL UNIT", "ACTUAL LENGTH", "ACTUAL WIDTH", "ACTUAL HEIGHT", "ACTUAL UNIT TYPE",
"DECLARED WEIGHT", "DECLARED UNIT", "DECLARED LENGTH", "DECLARED WIDTH", "DECLARED HEIGHT", "DECLARED UNIT TYPE", "FROM NAME",
"FROM ADDRESS", "FROM CITY", "FROM STATE", "FROM POSTAL CODE", "TO NAME", "TO ADDRESS", "TO CITY", "TO STATE", "TO POSTAL CODE",
"CUST REF 1", "CUST REF 2", "BILLED LENGTH", "BILLED WIDTH", "BILLED HEIGHT", "CUBIC WEIGHT", "BILLED WEIGHT", "CHARGE CODE",
"INTL CHARGE ZONE", "RECEIVING COUNTRY", "Charge Zone", "Service", "QTY", "AVG. UNIT PRICE EX GST", "AMOUNT EX GST")
names(ap_post_supply) <- new_col_names
#### 3.j create a folder to store outputs ----
folder_name <- paste0("ap_post_supply_", predefined_text, ".csv")
# Replace invalid characters in folder name
clean_folder_name <- gsub("[^A-Za-z0-9._-]", "_", folder_name)
new_folder_path <- file.path(output_folder, clean_folder_name)
dir.create(new_folder_path, showWarnings = FALSE)
#### 3.k split the ap supply out per customer ----
# Get unique values of NAME_1
unique_names <- unique(billing_doc_output$NAME_1)
# Loop through each unique NAME_1 value
for (name in unique_names) {
# Subset data frame for current NAME_1 value
subset_data <- billing_doc_output[billing_doc_output$NAME_1 == name, ]
# Reorder the columns in final_output
subset_data <- subset_data[, desired_order]
# Replace invalid characters in name
clean_name <- gsub("[^A-Za-z0-9._-]", "_", name)
# Generate file name with folder path
file_name <- file.path(new_folder_path, paste0("ap_post_supply_", predefined_text, "_", clean_name, ".csv"))
# Write subset to CSV
#write.csv(subset_data, file = file_name, row.names = FALSE)
}
#### 3.l create the ap post supply consolidated ----
output_folder <- file.path(getwd(), paste0("output_billing_dates_", predefined_text))
if (!file.exists(output_folder)) {
dir.create(output_folder, recursive = TRUE)
}
file_name <- paste0("ap_post_supply_consolidated_", predefined_text, ".csv")
full_file_path <- file.path(output_folder, file_name)
#write.csv(ap_post_supply, file = full_file_path, row.names = FALSE)
###### Section 4.a Summary calculations created ----
# just the custo and description
summary_by_custo_description <- billing_doc_output %>%
filter(!(DESCRIPTION %in% c("AP Parcels Domestic Fuel Surcharge",
"AP Security Mgt Charge",
"AP Parcels Domestic Fuel Surchg Tax Free",
"AP Security Mgt Charge Tax Free",
"STC Parcels Domestic Fuel Surcharge",
"Over Maximum Limits Fee"))) %>%
group_by(NAME_1, DESCRIPTION) %>%
summarize(
count = n(),
sum_of_AMOUNT.INCL.TAX = sum(AMOUNT.INCL.TAX, na.rm = TRUE),
sum_of_base_charge_incgst = sum(base_charge_incgst, na.rm = TRUE),
sum_of_AMOUNT.EXCL.TAX = sum(AMOUNT.EXCL.TAX, na.rm = TRUE),
sum_of_base_charge_exgst = sum(base_charge_exgst, na.rm = TRUE),
sum_of_uplift_figure_exgst = sum(uplift_figure_exgst, na.rm = TRUE),
sum_of_charge_to_custo_exgst = sum(charge_to_custo_exgst, na.rm = TRUE),
sum_of_FUEL.SURCHARGE.. = sum(FUEL.SURCHARGE.., na.rm = TRUE),
sum_of_fuel_surcharge = sum(fuel_surcharge, na.rm = TRUE),
sum_of_fuel_surcharge_uplifted = sum(fuel_surcharge_uplifted, na.rm = TRUE),
sum_of_SMC.FEE = sum(SMC.FEE, na.rm = TRUE),
sum_of_sec_mng_chrg = sum(sec_mng_chrg, na.rm = TRUE),
sum_of_sec_mng_chrg_uplifted= sum(sec_mng_chrg_uplifted, na.rm = TRUE),
#    sum_of_OVER.MAX.LIMITS.FEE = sum(OVER.MAX.LIMITS.FEE, na.rm = TRUE),
sum_of_over_max_limits_fee = sum(over_max_limits_fee, na.rm = TRUE)
)
output_folder <- file.path(getwd(), paste0("output_billing_dates_", predefined_text))
if (!file.exists(output_folder)) {
dir.create(output_folder, recursive = TRUE)
}
file_name <- paste0("summary_by_custo_description_", predefined_text, ".csv")
full_file_path <- file.path(output_folder, file_name)
#write.csv(summary_by_custo_description, file = full_file_path, row.names = FALSE)
#just the description
summary_by_description <- billing_doc_output %>%
filter(!(DESCRIPTION %in% c("AP Parcels Domestic Fuel Surcharge",
"AP Security Mgt Charge",
"AP Parcels Domestic Fuel Surchg Tax Free",
"AP Security Mgt Charge Tax Free",
"STC Parcels Domestic Fuel Surcharge",
"Over Maximum Limits Fee"))) %>%
group_by(DESCRIPTION) %>%
summarize(
count = n(),
sum_of_AMOUNT.INCL.TAX = sum(AMOUNT.INCL.TAX, na.rm = TRUE),
sum_of_base_charge_incgst = sum(base_charge_incgst, na.rm = TRUE),
sum_of_AMOUNT.EXCL.TAX = sum(AMOUNT.EXCL.TAX, na.rm = TRUE),
sum_of_base_charge_exgst = sum(base_charge_exgst, na.rm = TRUE),
sum_of_uplift_figure_exgst = sum(uplift_figure_exgst, na.rm = TRUE),
sum_of_charge_to_custo_exgst = sum(charge_to_custo_exgst, na.rm = TRUE),
sum_of_FUEL.SURCHARGE.. = sum(FUEL.SURCHARGE.., na.rm = TRUE),
sum_of_fuel_surcharge = sum(fuel_surcharge, na.rm = TRUE),
sum_of_fuel_surcharge_uplifted = sum(fuel_surcharge_uplifted, na.rm = TRUE),
sum_of_SMC.FEE = sum(SMC.FEE, na.rm = TRUE),
sum_of_sec_mng_chrg = sum(sec_mng_chrg, na.rm = TRUE),
sum_of_sec_mng_chrg_uplifted= sum(sec_mng_chrg_uplifted, na.rm = TRUE),
#    sum_of_OVER.MAX.LIMITS.FEE = sum(OVER.MAX.LIMITS.FEE, na.rm = TRUE),
sum_of_over_max_limits_fee = sum(over_max_limits_fee, na.rm = TRUE)
)
output_folder <- file.path(getwd(), paste0("output_billing_dates_", predefined_text))
if (!file.exists(output_folder)) {
dir.create(output_folder, recursive = TRUE)
}
file_name <- paste0("summary_by_description_", predefined_text, ".csv")
full_file_path <- file.path(output_folder, file_name)
#write.csv(summary_by_description, file = full_file_path, row.names = FALSE)
################################################
# Provide a download link for the result CSV files
output$download_result1 <- downloadHandler(
filename = function() {
"billing_doc_output.csv"
},
content = function(file) {
write.csv(billing_doc_output, file)
}
)
output$download_result2 <- downloadHandler(
filename = function() {
"ap_post_supply.csv"
},
content = function(file) {
write.csv(ap_post_supply, file)
}
)
output$download_result3 <- downloadHandler(
filename = function() {
paste("ap_post_supply_", predefined_text, ".zip", sep = "")
},
content = function(file) {
# Create a temporary directory
temp_dir <- tempdir()
# Define a folder path within the temp directory
folder_name <- paste0("ap_post_supply_", predefined_text)
clean_folder_name <- gsub("[^A-Za-z0-9._-]", "_", folder_name)
new_folder_path <- file.path(temp_dir, clean_folder_name)
dir.create(new_folder_path, showWarnings = FALSE)
# Get unique values of NAME_1
unique_names <- unique(billing_doc_output$NAME_1)
# Loop through each unique NAME_1 value and write CSV files
for (name in unique_names) {
# Subset data frame for current NAME_1 value
subset_data <- billing_doc_output[billing_doc_output$NAME_1 == name, ]
# Reorder the columns in final_output
subset_data <- subset_data[, desired_order]
# Replace invalid characters in name
clean_name <- gsub("[^A-Za-z0-9._-]", "_", name)
# Generate file name with folder path
file_name <- file.path(new_folder_path, paste0(clean_name, "ap_post_supply_", predefined_text, "_",  ".csv"))
# Write subset to CSV
write.csv(subset_data, file = file_name, row.names = FALSE)
}
# Zip the folder
zip_file <- file.path(temp_dir, paste0("ap_post_supply_", predefined_text, ".zip"))
zip::zipr(zip_file, new_folder_path)
# Copy the zip file to the file argument
file.copy(zip_file, file)
},
contentType = "application/zip"
)
output$download_result4 <- downloadHandler(
filename = function() {
"summary_by_custo_description.csv"
},
content = function(file) {
write.csv(summary_by_custo_description, file)
}
)
output$download_result5 <- downloadHandler(
filename = function() {
"summary_by_description.csv"
},
content = function(file) {
write.csv(summary_by_description, file)
}
)
downloadButton("download_result1", "Download billing_doc_output")
downloadButton("download_result2", "Download ap_post_supply")
downloadButton("download_result3", "Download ap_post_supply_per_customer")
downloadButton("download_result4", "Download summary_by_custo_&_description")
downloadButton("download_result5", "Download summary_by_description")
# Print confirmation message with the result
output$custom_output <- renderPrint({
cat("Calculation completed successfully.\n")
#      cat("Total Quantity:", sum_qty, "\n")
cat("Fuel Surcharge:", user_inputs$fuel_surcharge, "\n")
#   cat("Result (sum_qty * fuel_surcharge):", result, "\n")
})
})
# Render the summary text
output$summary <- renderPrint({
user_inputs <- user_data()
cat("User Inputs:\n")
cat("Fuel Surcharge:", user_inputs$fuel_surcharge, "\n")
cat("Force Majeure Fee:", user_inputs$force_majeure_fee, "\n")
cat("Peak Fee:", user_inputs$peak_fee, "\n")
})
}
# Run the application
shinyApp(ui = ui, server = server)
gc()
#install.packages("dplyr")
library(dplyr)
#### 1.b request CSV and user inputs ----
#bill = read.csv("ESTORELOGISTICSPTYLTD_0006794750_20240303_1013048181.csv", head=TRUE, sep=",")
#bill = read.csv("ESTORELOGISTICSPTYLTD_0006794750_20240219_1013016084.csv", head=TRUE, sep=",")
#bill = read.csv("billing_docs/1013016084-6214851349184512.csv", head=TRUE, sep=",")  # 01 - 16 feb
bill = read.csv("billing_docs/ESTORELOGISTICSPTYLTD_0006794750_20240519_1013222274.csv", head=TRUE, sep=",")  # 17 - 28 feb #, fileEncoding = "UTF-8", stringsAsFactors = FALSE
#bill = read.csv("billing_docs/1013085979-5806754721955840.csv", head=TRUE, sep=",")  # 01 - 16 Mar
#bill = read.csv("billing_docs/1013111472-5847093054799872.csv", head=TRUE, sep=",")  # 17 - 31 Mar
#bill = read.csv("billing_docs/1013156007-5729374082957312.csv", head=TRUE, sep=",")  # 01 - 15 April
#bill = read.csv("billing_docs/1013168047-5072493127663616.csv", head=TRUE, sep=",")  # 16 - 30 April;
#### 1.c billing date extracted for title generation
# Get the min and max dates the bill covers
bill$BILLING.DATE <- as.Date(as.character(bill$BILLING.DATE), format = "%Y%m%d")
#min_date <- min(bill$BILLING.DATE, na.rm = TRUE)
max_date <- max(bill$BILLING.DATE, na.rm = TRUE)
predefined_text <- paste(  "PE", format(max_date, "%Y-%m-%d"))
# pre feb base rates. Left in for pulling comparison calcs
#cz_pre_feb_eparcel_regular_ex_mel = read.csv("reference_data/cz_pre_feb_eparcel_regular_ex_mel.csv", head=TRUE, row.names = 1,  sep=",")
#cz_pre_feb_eparcel_express_ex_mel = read.csv("reference_data/cz_pre_feb_eparcel_express_ex_mel.csv", head=TRUE, row.names = 1,  sep=",")
#cz_pre_feb_eparcel_regular_ex_syd = read.csv("reference_data/cz_pre_feb_eparcel_regular_ex_syd.csv", head=TRUE, row.names = 1,  sep=",")
#cz_pre_feb_eparcel_express_ex_syd = read.csv("reference_data/cz_pre_feb_eparcel_express_ex_syd.csv", head=TRUE, row.names = 1,  sep=",")
#### 1.d load the reference data
#this could be changed to extract some a shared drive
cz_post_feb_eparcel_regular_ex_mel = read.csv("reference_data/cz_post_feb_eparcel_regular_ex_mel.csv", head=TRUE, row.names = 1,  sep=",")
cz_post_feb_eparcel_express_ex_mel = read.csv("reference_data/cz_post_feb_eparcel_express_ex_mel.csv", head=TRUE, row.names = 1,  sep=",")
cz_post_feb_eparcel_regular_ex_syd = read.csv("reference_data/cz_post_feb_eparcel_regular_ex_syd.csv", head=TRUE, row.names = 1,  sep=",")
cz_post_feb_eparcel_express_ex_syd = read.csv("reference_data/cz_post_feb_eparcel_express_ex_syd.csv", head=TRUE, row.names = 1,  sep=",")
cz_post_feb_eparcel_express_ex_syd = read.csv("reference_data/cz_post_feb_eparcel_express_ex_syd.csv", head=TRUE, row.names = 1,  sep=",")
cz_post_feb_eparcel_wine_ex_mel = read.csv("reference_data/cz_post_feb_eparcel_wine_ex_mel.csv", head=TRUE, row.names = 1,  sep=",")
cz_post_feb_eparcel_wine_ex_syd = read.csv("reference_data/cz_post_feb_eparcel_wine_ex_syd.csv", head=TRUE, row.names = 1,  sep=",")
cz_post_feb_eparcel_international_express_merch = read.csv("reference_data/cz_post_feb_eparcel_international_express_merch.csv", head=TRUE, row.names = 1,  sep=",")
cz_post_feb_eparcel_international_standard = read.csv("reference_data/cz_post_feb_eparcel_international_standard.csv", head=TRUE, row.names = 1,  sep=",")
# custo mark up
customer_uplift_march_24 = read.csv("reference_data/customer_uplift_march_24.csv", head=TRUE, row.names = 1,  sep=",")
#custo codes
estore_custo_codes = read.csv("reference_data/estore_custo_codes.csv", head=TRUE, sep=",")
#### 1.e customer code ----
# Function to extract letters before the first "-"
extract_letters <- function(text) {
split_text <- strsplit(as.character(text), " ")[[1]]
return(trimws(split_text[1]))
}
# Create a new column in bill to store the corresponding values from DF2
bill$customer_code <- NA
# Loop through each row in bill
for (i in 1:nrow(bill)) {
# Get the trading name from bill$NAME_1
trading_name <- bill$NAME_1[i]
# Find the corresponding row index in DF2 where trading_name matches
match_index <- which(estore_custo_codes$trading_name == trading_name)
# If a match is found, assign the corresponding value from DF2 to bill
if (length(match_index) > 0) {
bill$customer_code[i] <- estore_custo_codes$eStore_code[match_index]
} else {
# Handle cases where no match is found
# Extract letters before the "-" in bill$NAME_1
letters_before_dash <- substr(trading_name, 1, regexpr("-", trading_name) - 1)
bill$customer_code[i] <- ifelse(letters_before_dash != "", letters_before_dash, "custo code not found")
}
}
library(dplyr)
#### 1.b request CSV and user inputs ----
#bill = read.csv("ESTORELOGISTICSPTYLTD_0006794750_20240303_1013048181.csv", head=TRUE, sep=",")
#bill = read.csv("ESTORELOGISTICSPTYLTD_0006794750_20240219_1013016084.csv", head=TRUE, sep=",")
#bill = read.csv("billing_docs/1013016084-6214851349184512.csv", head=TRUE, sep=",")  # 01 - 16 feb
bill = read.csv("billing_docs/1013168047-5072493127663616.csv", head=TRUE, sep=",")  # 17 - 28 feb #, fileEncoding = "UTF-8", stringsAsFactors = FALSE
#bill = read.csv("billing_docs/1013085979-5806754721955840.csv", head=TRUE, sep=",")  # 01 - 16 Mar
#bill = read.csv("billing_docs/1013111472-5847093054799872.csv", head=TRUE, sep=",")  # 17 - 31 Mar
#bill = read.csv("billing_docs/1013156007-5729374082957312.csv", head=TRUE, sep=",")  # 01 - 15 April
#bill = read.csv("billing_docs/1013168047-5072493127663616.csv", head=TRUE, sep=",")  # 16 - 30 April;
#### 1.c billing date extracted for title generation
# Get the min and max dates the bill covers
bill$BILLING.DATE <- as.Date(as.character(bill$BILLING.DATE), format = "%Y%m%d")
#min_date <- min(bill$BILLING.DATE, na.rm = TRUE)
max_date <- max(bill$BILLING.DATE, na.rm = TRUE)
predefined_text <- paste(  "PE", format(max_date, "%Y-%m-%d"))
library(dplyr)
#### 1.b request CSV and user inputs ----
#bill = read.csv("ESTORELOGISTICSPTYLTD_0006794750_20240303_1013048181.csv", head=TRUE, sep=",")
#bill = read.csv("ESTORELOGISTICSPTYLTD_0006794750_20240219_1013016084.csv", head=TRUE, sep=",")
#bill = read.csv("billing_docs/1013016084-6214851349184512.csv", head=TRUE, sep=",")  # 01 - 16 feb
bill = read.csv("billing_docs/1013168047-5072493127663616.csv", head=TRUE, sep=",")  # 17 - 28 feb #, fileEncoding = "UTF-8", stringsAsFactors = FALSE
#bill = read.csv("billing_docs/1013085979-5806754721955840.csv", head=TRUE, sep=",")  # 01 - 16 Mar
#bill = read.csv("billing_docs/1013111472-5847093054799872.csv", head=TRUE, sep=",")  # 17 - 31 Mar
#bill = read.csv("billing_docs/1013156007-5729374082957312.csv", head=TRUE, sep=",")  # 01 - 15 April
#bill = read.csv("billing_docs/1013168047-5072493127663616.csv", head=TRUE, sep=",")  # 16 - 30 April;
#### 1.c billing date extracted for title generation
# Get the min and max dates the bill covers
bill$BILLING.DATE <- as.Date(as.character(bill$BILLING.DATE), format = "%Y%m%d")
#min_date <- min(bill$BILLING.DATE, na.rm = TRUE)
max_date <- max(bill$BILLING.DATE, na.rm = TRUE)
predefined_text <- paste(  "PE", format(max_date, "%Y-%m-%d"))
#bill = read.csv("billing_docs/1013016084-6214851349184512.csv", head=TRUE, sep=",")  # 01 - 16 feb
bill = read.csv("billing_docs/ESTORELOGISTICSPTYLTD_0006794750_20240519_1013222274.csv", head=TRUE, sep=",")  # 17 - 28 feb #, fileEncoding = "UTF-8", stringsAsFactors = FALSE
#bill = read.csv("billing_docs/1013085979-5806754721955840.csv", head=TRUE, sep=",")  # 01 - 16 Mar
#bill = read.csv("billing_docs/1013111472-5847093054799872.csv", head=TRUE, sep=",")  # 17 - 31 Mar
#bill = read.csv("billing_docs/1013156007-5729374082957312.csv", head=TRUE, sep=",")  # 01 - 15 April
#bill = read.csv("billing_docs/1013168047-5072493127663616.csv", head=TRUE, sep=",")  # 16 - 30 April;
#### 1.c billing date extracted for title generation
# Get the min and max dates the bill covers
bill$BILLING.DATE <- as.Date(as.character(bill$BILLING.DATE), format = "%Y%m%d")
#min_date <- min(bill$BILLING.DATE, na.rm = TRUE)
max_date <- max(bill$BILLING.DATE, na.rm = TRUE)
predefined_text <- paste(  "PE", format(max_date, "%Y-%m-%d"))
View(bill)
#install.packages("dplyr")
library(dplyr)
#### 1.b request CSV and user inputs ----
#bill = read.csv("ESTORELOGISTICSPTYLTD_0006794750_20240303_1013048181.csv", head=TRUE, sep=",")
#bill = read.csv("ESTORELOGISTICSPTYLTD_0006794750_20240219_1013016084.csv", head=TRUE, sep=",")
#bill = read.csv("billing_docs/1013016084-6214851349184512.csv", head=TRUE, sep=",")  # 01 - 16 feb
bill = read.csv("billing_docs/ESTORELOGISTICSPTYLTD_0006794750_20240519_1013222274.csv", head=TRUE, sep=",")  # 17 - 28 feb #, fileEncoding = "UTF-8", stringsAsFactors = FALSE
#bill = read.csv("billing_docs/1013085979-5806754721955840.csv", head=TRUE, sep=",")  # 01 - 16 Mar
#bill = read.csv("billing_docs/1013111472-5847093054799872.csv", head=TRUE, sep=",")  # 17 - 31 Mar
#bill = read.csv("billing_docs/1013156007-5729374082957312.csv", head=TRUE, sep=",")  # 01 - 15 April
#bill = read.csv("billing_docs/1013168047-5072493127663616.csv", head=TRUE, sep=",")  # 16 - 30 April;
#### 1.c billing date extracted for title generation
# Get the min and max dates the bill covers
bill$BILLING.DATE <- as.Date(as.character(bill$SERVICE.DATE), format = "%Y%m%d")
#min_date <- min(bill$BILLING.DATE, na.rm = TRUE)
max_date <- max(bill$BILLING.DATE, na.rm = TRUE)
predefined_text <- paste(  "PE", format(max_date, "%Y-%m-%d"))
bill$BILLING.DATE <- as.Date(as.character(bill$BILLING.DATE))
#min_date <- min(bill$BILLING.DATE, na.rm = TRUE)
max_date <- max(bill$BILLING.DATE, na.rm = TRUE)
predefined_text <- paste(  "PE", format(max_date, "%Y-%m-%d"))
#bill = read.csv("billing_docs/1013016084-6214851349184512.csv", head=TRUE, sep=",")  # 01 - 16 feb
bill = read.csv("billing_docs/ESTORELOGISTICSPTYLTD_0006794750_20240519_1013222274.csv", head=TRUE, sep=",")  # 17 - 28 feb #, fileEncoding = "UTF-8", stringsAsFactors = FALSE
#bill = read.csv("billing_docs/1013085979-5806754721955840.csv", head=TRUE, sep=",")  # 01 - 16 Mar
#bill = read.csv("billing_docs/1013111472-5847093054799872.csv", head=TRUE, sep=",")  # 17 - 31 Mar
#bill = read.csv("billing_docs/1013156007-5729374082957312.csv", head=TRUE, sep=",")  # 01 - 15 April
#bill = read.csv("billing_docs/1013168047-5072493127663616.csv", head=TRUE, sep=",")  # 16 - 30 April;
#### 1.c billing date extracted for title generation
# Get the min and max dates the bill covers
bill$BILLING.DATE <- as.Date(as.character(bill$BILLING.DATE))
#bill = read.csv("billing_docs/1013016084-6214851349184512.csv", head=TRUE, sep=",")  # 01 - 16 feb
bill = read.csv("billing_docs/ESTORELOGISTICSPTYLTD_0006794750_20240519_1013222274.csv", head=TRUE, sep=",")  # 17 - 28 feb #, fileEncoding = "UTF-8", stringsAsFactors = FALSE
#bill = read.csv("billing_docs/1013085979-5806754721955840.csv", head=TRUE, sep=",")  # 01 - 16 Mar
#bill = read.csv("billing_docs/1013111472-5847093054799872.csv", head=TRUE, sep=",")  # 17 - 31 Mar
#bill = read.csv("billing_docs/1013156007-5729374082957312.csv", head=TRUE, sep=",")  # 01 - 15 April
#bill = read.csv("billing_docs/1013168047-5072493127663616.csv", head=TRUE, sep=",")  # 16 - 30 April;
#### 1.c billing date extracted for title generation
# Get the min and max dates the bill covers
bill$BILLING.DATE <- as.Date(as.character(bill$BILLING.DATE), format = "%Y%m%d")
#min_date <- min(bill$BILLING.DATE, na.rm = TRUE)
max_date <- max(bill$BILLING.DATE, na.rm = TRUE)
predefined_text <- paste(  "PE", format(max_date, "%Y-%m-%d"))
bill = read.csv("billing_docs/ESTORELOGISTICSPTYLTD_0006794750_20240519_1013222274.csv", head=TRUE, sep=",")  # 17 - 28 feb #, fileEncoding = "UTF-8", stringsAsFactors = FALSE
#bill = read.csv("billing_docs/1013085979-5806754721955840.csv", head=TRUE, sep=",")  # 01 - 16 Mar
#bill = read.csv("billing_docs/1013111472-5847093054799872.csv", head=TRUE, sep=",")  # 17 - 31 Mar
#bill = read.csv("billing_docs/1013156007-5729374082957312.csv", head=TRUE, sep=",")  # 01 - 15 April
#bill = read.csv("billing_docs/1013168047-5072493127663616.csv", head=TRUE, sep=",")  # 16 - 30 April;
#### 1.c billing date extracted for title generation
# Get the min and max dates the bill covers
bill$BILLING.DATE <- as.Date(as.character(bill$BILLING.DATE), format = "%Y%m%d")
min_date <- min(bill$BILLING.DATE, na.rm = TRUE)
max_date <- max(bill$BILLING.DATE, na.rm = TRUE)
predefined_text <- paste(  "PE", format(max_date, "%Y-%m-%d"))
bill = read.csv("billing_docs/ESTORELOGISTICSPTYLTD_0006794750_20240519_1013222274.csv", head=TRUE, sep=",")  # 17 - 28 feb #, fileEncoding = "UTF-8", stringsAsFactors = FALSE
bill = read.csv("billing_docs/ESTORELOGISTICSPTYLTD_0006794750_20240519_1013222274.csv", head=TRUE, sep=",")  # 17 - 28 feb #, fileEncoding = "UTF-8", stringsAsFactors = FALSE
bill = read.csv("billing_docs/ESTORELOGISTICSPTYLTD_0006794750_20240519_1013222274.csv", head=TRUE, sep=",")  # 17 - 28 feb #, fileEncoding = "UTF-8", stringsAsFactors = FALSE
#bill = read.csv("billing_docs/1013085979-5806754721955840.csv", head=TRUE, sep=",")  # 01 - 16 Mar
#bill = read.csv("billing_docs/1013111472-5847093054799872.csv", head=TRUE, sep=",")  # 17 - 31 Mar
#bill = read.csv("billing_docs/1013156007-5729374082957312.csv", head=TRUE, sep=",")  # 01 - 15 April
#bill = read.csv("billing_docs/1013168047-5072493127663616.csv", head=TRUE, sep=",")  # 16 - 30 April;
#### 1.c billing date extracted for title generation
# Get the min and max dates the bill covers
bill$BILLING.DATE <- as.Date(as.character(bill$BILLING.DATE), format = "%Y%m%d")
min_date <- min(bill$BILLING.DATE, na.rm = TRUE)
max_date <- max(bill$BILLING.DATE, na.rm = TRUE)
predefined_text <- paste(  "PE", format(max_date, "%Y-%m-%d"))
bill = read.csv("billing_docs/ESTORELOGISTICSPTYLTD_0006794750_20240519_1013222274.csv", head=TRUE, sep=",")  # 17 - 28 feb #, fileEncoding = "UTF-8", stringsAsFactors = FALSE
#bill = read.csv("billing_docs/1013085979-5806754721955840.csv", head=TRUE, sep=",")  # 01 - 16 Mar
#bill = read.csv("billing_docs/1013111472-5847093054799872.csv", head=TRUE, sep=",")  # 17 - 31 Mar
#bill = read.csv("billing_docs/1013156007-5729374082957312.csv", head=TRUE, sep=",")  # 01 - 15 April
#bill = read.csv("billing_docs/1013168047-5072493127663616.csv", head=TRUE, sep=",")  # 16 - 30 April;
#### 1.c billing date extracted for title generation
# Get the min and max dates the bill covers
bill$BILLING.DATE <- as.Date(as.character(bill$BILLING.DATE), format = "%Y%m%d")
min_date <- min(bill$BILLING.DATE, na.rm = TRUE)
max_date <- max(bill$BILLING.DATE, na.rm = TRUE)
predefined_text <- paste(  "PE", format(max_date, "%Y-%m-%d"))
bill = read.csv("billing_docs/ESTORELOGISTICSPTYLTD_0006794750_20240519_1013222274.csv", head=TRUE, sep=",", fileEncoding = "UTF-8")  # 17 - 28 feb #, fileEncoding = "UTF-8", stringsAsFactors = FALSE
#bill = read.csv("billing_docs/1013085979-5806754721955840.csv", head=TRUE, sep=",")  # 01 - 16 Mar
#bill = read.csv("billing_docs/1013111472-5847093054799872.csv", head=TRUE, sep=",")  # 17 - 31 Mar
#bill = read.csv("billing_docs/1013156007-5729374082957312.csv", head=TRUE, sep=",")  # 01 - 15 April
#bill = read.csv("billing_docs/1013168047-5072493127663616.csv", head=TRUE, sep=",")  # 16 - 30 April;
#### 1.c billing date extracted for title generation
# Get the min and max dates the bill covers
bill$BILLING.DATE <- as.Date(as.character(bill$BILLING.DATE), format = "%Y%m%d")
min_date <- min(bill$BILLING.DATE, na.rm = TRUE)
max_date <- max(bill$BILLING.DATE, na.rm = TRUE)
predefined_text <- paste(  "PE", format(max_date, "%Y-%m-%d"))
#install.packages("dplyr")
library(dplyr)
#### 1.b request CSV and user inputs ----
#bill = read.csv("ESTORELOGISTICSPTYLTD_0006794750_20240303_1013048181.csv", head=TRUE, sep=",")
#bill = read.csv("ESTORELOGISTICSPTYLTD_0006794750_20240219_1013016084.csv", head=TRUE, sep=",")
#bill = read.csv("billing_docs/1013016084-6214851349184512.csv", head=TRUE, sep=",")  # 01 - 16 feb
bill = read.csv("billing_docs/ESTORELOGISTICSPTYLTD_0006794750_20240519_1013222274.csv", head=TRUE, sep=",", fileEncoding = "UTF-8", stringsAsFactors = FALSE)  # 17 - 28 feb
#bill = read.csv("billing_docs/1013085979-5806754721955840.csv", head=TRUE, sep=",")  # 01 - 16 Mar
#bill = read.csv("billing_docs/1013111472-5847093054799872.csv", head=TRUE, sep=",")  # 17 - 31 Mar
#bill = read.csv("billing_docs/1013156007-5729374082957312.csv", head=TRUE, sep=",")  # 01 - 15 April
#bill = read.csv("billing_docs/1013168047-5072493127663616.csv", head=TRUE, sep=",")  # 16 - 30 April;
#### 1.c billing date extracted for title generation
# Get the min and max dates the bill covers
bill$BILLING.DATE <- as.Date(as.character(bill$BILLING.DATE), format = "%Y%m%d")
min_date <- min(bill$BILLING.DATE, na.rm = TRUE)
max_date <- max(bill$BILLING.DATE, na.rm = TRUE)
predefined_text <- paste(  "PE", format(max_date, "%Y-%m-%d"))
