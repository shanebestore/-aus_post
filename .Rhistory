for (name in unique_names) {
# Subset data frame for current NAME_1 value
subset_data <- agg_block[agg_block$NAME_1 == name, ]
# Reorder the columns in final_output
subset_data <- subset_data[, desired_order]
# Replace invalid characters in name
clean_name <- gsub("[^A-Za-z0-9._-]", "_", name)
# Generate file name with folder path
file_name <- file.path(new_folder_path, paste0("ap_post_supply_", predefined_text, "_", clean_name, ".csv"))
# Write subset to CSV
write.csv(subset_data, file = file_name, row.names = FALSE)
}
##### ap post supply consolodated ###
output_folder <- file.path(getwd(), paste0("output_billing_dates_", predefined_text))
if (!file.exists(output_folder)) {
dir.create(output_folder, recursive = TRUE)
}
file_name <- paste0("ap_post_supply_consolidated", predefined_text, ".csv")
full_file_path <- file.path(output_folder, file_name)
write.csv(ap_post_supply, file = full_file_path, row.names = FALSE)
summary_by_description <- agg_block %>%
filter(!(DESCRIPTION %in% c("AP Parcels Domestic Fuel Surcharge",
"AP Security Mgt Charge",
"AP Parcels Domestic Fuel Surchg Tax Free",
"AP Security Mgt Charge Tax Free",
"STC Parcels Domestic Fuel Surcharge",
"Over Maximum Limits Fee"))) %>%
group_by(NAME_1, DESCRIPTION) %>%
summarize(
count = n(),
sum_of_AMOUNT.INCL.TAX = sum(AMOUNT.INCL.TAX, na.rm = TRUE),
sum_of_base_charge_incgst = sum(base_charge_incgst, na.rm = TRUE),
sum_of_AMOUNT.EXCL.TAX = sum(AMOUNT.EXCL.TAX, na.rm = TRUE),
sum_of_base_charge_exgst = sum(base_charge_exgst, na.rm = TRUE),
sum_of_uplift_figure_exgst = sum(uplift_figure_exgst, na.rm = TRUE),
sum_of_charge_to_custo_exgst = sum(charge_to_custo_exgst, na.rm = TRUE),
sum_of_FUEL.SURCHARGE.. = sum(FUEL.SURCHARGE.., na.rm = TRUE),
sum_of_fuel_surcharge = sum(fuel_surcharge, na.rm = TRUE),
sum_of_SMC.FEE = sum(SMC.FEE, na.rm = TRUE),
sum_of_sec_mng_chrg = sum(sec_mng_chrg, na.rm = TRUE),
#    sum_of_OVER.MAX.LIMITS.FEE = sum(OVER.MAX.LIMITS.FEE, na.rm = TRUE),
sum_of_over_max_limits_fee = sum(over_max_limits_fee, na.rm = TRUE)
)
print(summary_by_description)
output_folder <- file.path(getwd(), paste0("output_billing_dates_", predefined_text))
if (!file.exists(output_folder)) {
dir.create(output_folder, recursive = TRUE)
}
file_name <- paste0("summary_by_custo_&_description_", predefined_text, ".csv")
full_file_path <- file.path(output_folder, file_name)
write.csv(summary_by_description, file = full_file_path, row.names = FALSE)
######## just the description ########
summary_by_description <- agg_block %>%
filter(!(DESCRIPTION %in% c("AP Parcels Domestic Fuel Surcharge",
"AP Security Mgt Charge",
"AP Parcels Domestic Fuel Surchg Tax Free",
"AP Security Mgt Charge Tax Free",
"STC Parcels Domestic Fuel Surcharge",
"Over Maximum Limits Fee"))) %>%
group_by(DESCRIPTION) %>%
summarize(
count = n(),
sum_of_AMOUNT.INCL.TAX = sum(AMOUNT.INCL.TAX, na.rm = TRUE),
sum_of_base_charge_incgst = sum(base_charge_incgst, na.rm = TRUE),
sum_of_AMOUNT.EXCL.TAX = sum(AMOUNT.EXCL.TAX, na.rm = TRUE),
sum_of_base_charge_exgst = sum(base_charge_exgst, na.rm = TRUE),
sum_of_uplift_figure_exgst = sum(uplift_figure_exgst, na.rm = TRUE),
sum_of_charge_to_custo_exgst = sum(charge_to_custo_exgst, na.rm = TRUE),
sum_of_FUEL.SURCHARGE.. = sum(FUEL.SURCHARGE.., na.rm = TRUE),
sum_of_fuel_surcharge = sum(fuel_surcharge, na.rm = TRUE),
sum_of_SMC.FEE = sum(SMC.FEE, na.rm = TRUE),
sum_of_sec_mng_chrg = sum(sec_mng_chrg, na.rm = TRUE),
#    sum_of_OVER.MAX.LIMITS.FEE = sum(OVER.MAX.LIMITS.FEE, na.rm = TRUE),
sum_of_over_max_limits_fee = sum(over_max_limits_fee, na.rm = TRUE)
)
print(summary_by_description)
output_folder <- file.path(getwd(), paste0("output_billing_dates_", predefined_text))
if (!file.exists(output_folder)) {
dir.create(output_folder, recursive = TRUE)
}
file_name <- paste0("summary_by_description_", predefined_text, ".csv")
full_file_path <- file.path(output_folder, file_name)
write.csv(summary_by_description, file = full_file_path, row.names = FALSE)
start_time <- Sys.time()
# Source the first script
source("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post/ingest_&_prep.R")
# Run the second script
source("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post/basic_charges_combined.R")
source("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post/basic_charge_and_input_merge_and_clean.R")
source("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post/back billing aggregation.R")
end_time <- Sys.time()
# Calculate execution time
execution_time <- end_time - start_time
print(paste("Execution Time:", execution_time))
start_time <- Sys.time()
# Source the first script
source("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post/ingest_&_prep.R")
start_time <- Sys.time()
# Source the first script
source("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post/ingest_&_prep.R")
start_time <- Sys.time()
# Source the first script
source("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post/ingest_&_prep.R")
# Run the second script
source("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post/basic_charges_combined.R")
source("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post/basic_charge_and_input_merge_and_clean.R")
source("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post/back billing aggregation.R")
end_time <- Sys.time()
# Calculate execution time
execution_time <- end_time - start_time
print(paste("Execution Time:", execution_time))
#file_name <- paste0("ap_post_supply_", predefined_text, ".csv")
#write.csv(agg_block, file = file_name)
write.csv(agg_block, file = "agg_block.csv")
start_time <- Sys.time()
# Source the first script
source("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post/ingest_&_prep.R")
# Run the second script
source("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post/basic_charges_combined.R")
source("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post/basic_charge_and_input_merge_and_clean.R")
source("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post/back billing aggregation.R")
end_time <- Sys.time()
# Calculate execution time
execution_time <- end_time - start_time
print(paste("Execution Time:", execution_time))
start_time <- Sys.time()
# Source the first script
source("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post/ingest_&_prep.R")
# Run the second script
source("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post/basic_charges_combined.R")
source("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post/basic_charge_and_input_merge_and_clean.R")
source("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post/back billing aggregation.R")
end_time <- Sys.time()
# Calculate execution time
execution_time <- end_time - start_time
print(paste("Execution Time:", execution_time))
source("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post/ingest_&_prep.R")
# Run the second script
source("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post/basic_charges_combined.R")
#### Generate billing doc output file (line by line comparison) ####
# join the selected columns onto the billing doc in the correct places
# this creates the billing_doc_output which is a just the original output will the new columns added
# rename the article_id
names(bill)[names(bill) == "ARTICLE.ID"] <- "article_id"
names(output_all_services_2)[names(output_all_services_2) == "ARTICLE.ID"] <- "article_id"
# Specify columns to merge from output_all_services_2
merge_cols <- c("customer_code2", "customer_code", "service", "uplift", "DESCRIPTION", "BILLING.DOC", "article_id",
"base_charge_incgst", "base_charge_exgst", "base_charge_tax", "charge_value_uplift", "uplift_figure_exgst",
"charge_to_custo_exgst", "cubic_weight", "max_weight", "fuel_surcharge", "fuel_gst", "sec_mng_chrg", "sec_mng_gst",
"over_max_limits_fee", "weight_category_max", "warnings", "is_gst_free_zone")
selected_output_all_services_2 <- output_all_services_2[, merge_cols]
# Merge bill and selected columns from output_all_services_2 by the unique identifier
billing_doc_output <- merge(bill, selected_output_all_services_2, by = c("article_id", "BILLING.DOC", "DESCRIPTION"), all = TRUE)
# Insert new columns after "AVG..UNIT.PRICE"
avg_unit_price_index <- which(names(billing_doc_output ) == "AMOUNT.INCL.TAX")
billing_doc_output  <- cbind(billing_doc_output [, 1:avg_unit_price_index],
billing_doc_output [, c("base_charge_incgst","base_charge_exgst", "base_charge_tax", "charge_value_uplift", "uplift_figure_exgst", "charge_to_custo_exgst", "warnings")],
billing_doc_output [, (avg_unit_price_index + 1):ncol(billing_doc_output )])
# Insert new columns after "FUEL.GST"
fuel_gst_index <- which(names(billing_doc_output ) == "FUEL.GST")
billing_doc_output  <- cbind(billing_doc_output [, 1:fuel_gst_index  ],
billing_doc_output [, c("fuel_surcharge" ,"fuel_gst", "sec_mng_chrg", "sec_mng_gst", "over_max_limits_fee")],
billing_doc_output [, (fuel_gst_index  + 1):ncol(billing_doc_output )])
# Insert new columns after "BILLED.WEIGHT"
billed_weight_index <- which(names(billing_doc_output ) == "BILLED.WEIGHT")
billing_doc_output  <- cbind(billing_doc_output [, 1:billed_weight_index  ],
billing_doc_output [, c("cubic_weight", "max_weight", "weight_category_max", "service", "uplift")],
billing_doc_output [, (billed_weight_index  + 1):ncol(billing_doc_output )])
# Quick descrepancy check
discrepancy <- function(billing_doc_output) {
# Check if the rounded value of AMOUNT.EXCL.TAX is equal to base_charge_exgst
billing_doc_output$discrepancy <- ifelse(
round(billing_doc_output$AMOUNT.INCL.TAX, 2) == round(billing_doc_output$base_charge_incgst, 2),
"no",
"yes"
)
return(billing_doc_output)
}
billing_doc_output <- discrepancy(billing_doc_output)
# generate the file path
output_folder <- file.path(getwd(), paste0("output_billing_dates_", predefined_text))
if (!file.exists(output_folder)) {
dir.create(output_folder, recursive = TRUE)
}
file_name <- paste0("billing_doc_output_", predefined_text, ".csv")
full_file_path <- file.path(output_folder, file_name)
write.csv(billing_doc_output, file = full_file_path, row.names = FALSE)
#### aggregation block ####
#create international_charge_zone here for the time being at least
billing_doc_output$intl_charge_zone <- billing_doc_output$CHARGE.ZONE
# Produce the output for in the right structure this will be the basis for the aggregation and calculation files
desired_order <- c(
"customer_code", "NAME_1", "MAILING.STATEMENT.NO.", "ASSIGNMENT.NO." , "SERVICE.DATE" , "DESCRIPTION",
"BILLING.DATE", "CONSIGNMENT.ID", "article_id", "LODGEMENT.DATE", "ACTUAL.WEIGHT", "ACTUAL.UNIT", "ACTUAL.LENGTH",
"ACTUAL.WIDTH", "ACTUAL.HEIGHT", "ACTUAL.UNIT.TYPE",
"DECLARED.UNIT.TYPE", "DECLARED.WEIGHT",	"DECLARED.UNIT",	"DECLARED.LENGTH",	"DECLARED.WIDTH",
"DECLARED.HEIGHT",	"DECLARED.UNIT.TYPE", "FROM.NAME", 	"FROM.ADDRESS",	"FROM.CITY",	"FROM.STATE",	"FROM.POSTAL.CODE",
"TO.NAME",	"TO.ADDRESS",	"TO.CITY",	"TO.STATE",	"TO.POSTAL.CODE", "CUST.REF.1",	"CUST.REF.2",	"BILLED.LENGTH", "BILLED.WIDTH",
"BILLED.HEIGHT", "CUBIC.WEIGHT", "BILLED.WEIGHT", "CHARGE.CODE", "RECEIVING.COUNTRY", "intl_charge_zone", "CHARGE.ZONE", "service", "QTY", "AMOUNT.INCL.TAX",
"AMOUNT.EXCL.TAX", "base_charge_incgst", "base_charge_exgst", "uplift_figure_exgst", "charge_to_custo_exgst", "fuel_surcharge", "FUEL.SURCHARGE..",
"SMC.FEE", "sec_mng_chrg", "over_max_limits_fee", "BILLING.DOC", "is_gst_free_zone"#, "OVER.MAX.LIMITS.FEE"
)
# Reorder the columns in final_output
agg_block <- billing_doc_output [, desired_order]
#### sum the fuel_surcharge ####
# Calculate the sum of fuel_surcharge per BILLING.DOC
fuel_surcharge_per_billing_doc <- agg_block %>%
filter(is_gst_free_zone == 'No') %>%
group_by(BILLING.DOC) %>%
summarise(total_fuel_surcharge = sum(fuel_surcharge, na.rm = TRUE))
# Merge the total_fuel_surcharge back to the original dataframe
agg_block <- left_join(agg_block, fuel_surcharge_per_billing_doc, by = "BILLING.DOC")
# Update base_charge_exgst with the total fuel surcharge where DESCRIPTION is "AP Parcels Domestic Fuel Surcharge"
agg_block <- agg_block %>%
mutate(base_charge_exgst = ifelse(DESCRIPTION == "AP Parcels Domestic Fuel Surcharge",
total_fuel_surcharge,
base_charge_exgst)) %>%
select(-total_fuel_surcharge)
#### sum the fuel_surcharg tax free ####
# Calculate the sum of fuel_surcharge per BILLING.DOC where is_gst_free is 'yes'
fuel_surcharge_per_billing_doc <- agg_block %>%
filter(is_gst_free_zone == 'Yes') %>%
group_by(BILLING.DOC) %>%
summarise(total_fuel_surcharge = sum(fuel_surcharge, na.rm = TRUE))
# Merge the total_fuel_surcharge back to the original dataframe
agg_block <- left_join(agg_block, fuel_surcharge_per_billing_doc, by = "BILLING.DOC")
# Update base_charge_exgst with the total fuel surcharge where DESCRIPTION is "AP Parcels Domestic Fuel Surcharge"
agg_block <- agg_block %>%
mutate(base_charge_exgst = ifelse(DESCRIPTION == "AP Parcels Domestic Fuel Surchg Tax Free",
total_fuel_surcharge,
base_charge_exgst)) %>%
select(-total_fuel_surcharge)
#### sum the security management fee ####
# Calculate the sum of sec_mng_chrg per BILLING.DOC
sec_mng_chrg_per_billing_doc <- agg_block %>%
filter(is_gst_free_zone == 'No') %>%
group_by(BILLING.DOC) %>%
summarise(total_sec_mng_chrg = sum(sec_mng_chrg, na.rm = TRUE))
# Merge the total_sec_mng_chrg back to the original dataframe
agg_block <- left_join(agg_block, sec_mng_chrg_per_billing_doc, by = "BILLING.DOC")
# Update base_charge_incgst with the total sec_mng_chrg where DESCRIPTION is "AP Security Mgt Charge"
agg_block <- agg_block %>%
mutate(base_charge_exgst = ifelse(DESCRIPTION == "AP Security Mgt Charge",
total_sec_mng_chrg,
base_charge_exgst)) %>%
select(-total_sec_mng_chrg)
#### sum the security AP Security Mgt Charge Tax Free ####
# Calculate the sum of sec_mng_chrg per BILLING.DOC
sec_mng_chrg_per_billing_doc <- agg_block %>%
filter(is_gst_free_zone == 'Yes') %>%
group_by(BILLING.DOC) %>%
summarise(total_sec_mng_chrg = sum(sec_mng_chrg, na.rm = TRUE))
# Merge the total_sec_mng_chrg back to the original dataframe
agg_block <- left_join(agg_block, sec_mng_chrg_per_billing_doc, by = "BILLING.DOC")
# Update base_charge_incgst with the total sec_mng_chrg where DESCRIPTION is "AP Security Mgt Charge"
agg_block <- agg_block %>%
mutate(base_charge_exgst = ifelse(DESCRIPTION == "AP Security Mgt Charge Tax Free",
total_sec_mng_chrg,
base_charge_exgst)) %>%
select(-total_sec_mng_chrg)
#### bring across the services that we are not touching ####
agg_block$base_charge_incgst <- ifelse(agg_block$DESCRIPTION %in% c(
"More to Pay",
"On Demand Return to Sender",
"STC Parcels Domestic Fuel Surcharge",
"Duties and Taxes Admin Fee (DDP)",
"Delivered Duty Paid",
"AP International Line Haul Surcharge",
"International  Returns AIR",
"Lodgement Management Fee",
"Unmanifest Article"),
agg_block$AMOUNT.INCL.TAX,
agg_block$base_charge_incgst)
agg_block$base_charge_exgst <- ifelse(agg_block$DESCRIPTION %in% c(
"More to Pay",
"On Demand Return to Sender",
"STC Parcels Domestic Fuel Surcharge",
"Duties and Taxes Admin Fee (DDP)",
"Delivered Duty Paid",
"AP International Line Haul Surcharge",
"International  Returns AIR",
"Lodgement Management Fee",
"Unmanifest Article"),
agg_block$AMOUNT.EXCL.TAX,
agg_block$base_charge_exgst)
agg_block$avg_unit_price_charge_to_custo_ex_gst <- agg_block$QTY * agg_block$charge_to_custo_exgst
desired_order <- c(
"customer_code", "NAME_1", "MAILING.STATEMENT.NO.", "ASSIGNMENT.NO.", "SERVICE.DATE", "DESCRIPTION",
"BILLING.DATE", "CONSIGNMENT.ID", "article_id", "LODGEMENT.DATE", "ACTUAL.WEIGHT", "ACTUAL.UNIT", "ACTUAL.LENGTH",
"ACTUAL.WIDTH", "ACTUAL.HEIGHT", "ACTUAL.UNIT.TYPE", "DECLARED.WEIGHT",	"DECLARED.UNIT",	"DECLARED.LENGTH",	"DECLARED.WIDTH",
"DECLARED.HEIGHT",	"DECLARED.UNIT.TYPE", "FROM.NAME", 	"FROM.ADDRESS",	"FROM.CITY",	"FROM.STATE",	"FROM.POSTAL.CODE",
"TO.NAME",	"TO.ADDRESS",	"TO.CITY",	"TO.STATE",	"TO.POSTAL.CODE", "CUST.REF.1",	"CUST.REF.2",	"BILLED.LENGTH", "BILLED.WIDTH",
"BILLED.HEIGHT", "CUBIC.WEIGHT", "BILLED.WEIGHT", "CHARGE.CODE", "intl_charge_zone", "RECEIVING.COUNTRY", "CHARGE.ZONE", "service", "QTY",
"avg_unit_price_charge_to_custo_ex_gst", "charge_to_custo_exgst")
# Reorder the columns in final_output
ap_post_supply <- agg_block [, desired_order]
# Create a new folder in the specified directory
folder_name <- paste0("ap_post_supply_", predefined_text, ".csv")
# Replace invalid characters in folder name
clean_folder_name <- gsub("[^A-Za-z0-9._-]", "_", folder_name)
new_folder_path <- file.path("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post", clean_folder_name)
dir.create(new_folder_path, showWarnings = FALSE)
# Get unique values of NAME_1
unique_names <- unique(agg_block$NAME_1)
# Loop through each unique NAME_1 value
for (name in unique_names) {
# Subset data frame for current NAME_1 value
subset_data <- agg_block[agg_block$NAME_1 == name, ]
# Reorder the columns in final_output
subset_data <- subset_data[, desired_order]
# Replace invalid characters in name
clean_name <- gsub("[^A-Za-z0-9._-]", "_", name)
# Generate file name with folder path
file_name <- file.path(new_folder_path, paste0("ap_post_supply_", predefined_text, "_", clean_name, ".csv"))
# Write subset to CSV
write.csv(subset_data, file = file_name, row.names = FALSE)
}
start_time <- Sys.time()
# Source the first script
source("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post/ingest_&_prep.R")
# Run the second script
source("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post/basic_charges_combined.R")
source("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post/basic_charge_and_input_merge_and_clean.R")
source("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post/back billing aggregation.R")
start_time <- Sys.time()
# Source the first script
source("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post/ingest_&_prep.R")
# Run the second script
source("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post/basic_charges_combined.R")
source("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post/basic_charge_and_input_merge_and_clean.R")
source("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post/back billing aggregation.R")
end_time <- Sys.time()
# Calculate execution time
execution_time <- end_time - start_time
print(paste("Execution Time:", execution_time))
library(dplyr)
##### Bring in the billng doc #####
#bill = read.csv("ESTORELOGISTICSPTYLTD_0006794750_20240303_1013048181.csv", head=TRUE, sep=",")
#bill = read.csv("ESTORELOGISTICSPTYLTD_0006794750_20240219_1013016084.csv", head=TRUE, sep=",")
#1013156007-5729374082957312
bill = read.csv("billing_docs/1013016084-6214851349184512.csv", head=TRUE, sep=",")  # 01 - 16 feb
#bill = read.csv("billing_docs/1013048181-6514511150317568.csv", head=TRUE, sep=",")  # 17 - 28 feb
#bill = read.csv("billing_docs/1013085979-5806754721955840.csv", head=TRUE, sep=",")  # 01 - 16 Mar
#bill = read.csv("billing_docs/1013111472-5847093054799872.csv", head=TRUE, sep=",")  # 17 - 31 Mar
#bill = read.csv("billing_docs/1013156007-5729374082957312.csv", head=TRUE, sep=",")  # 01 - 15 April
#bill = read.csv("billing_docs/1013168047-5072493127663616.csv", head=TRUE, sep=",")  # 16 - 30 April;
# Get the min and max dates the bill covers
bill$BILLING.DATE <- as.Date(as.character(bill$BILLING.DATE), format = "%Y%m%d")
min_date <- min(bill$BILLING.DATE, na.rm = TRUE)
max_date <- max(bill$BILLING.DATE, na.rm = TRUE)
predefined_text <- paste( format(min_date, "%Y-%m-%d"), "to", format(max_date, "%Y-%m-%d"))
# pre feb base rates. Left in for pulling comparison calcs
#cz_pre_feb_eparcel_regular_ex_mel = read.csv("reference_data/cz_pre_feb_eparcel_regular_ex_mel.csv", head=TRUE, row.names = 1,  sep=",")
#cz_pre_feb_eparcel_express_ex_mel = read.csv("reference_data/cz_pre_feb_eparcel_express_ex_mel.csv", head=TRUE, row.names = 1,  sep=",")
#cz_pre_feb_eparcel_regular_ex_syd = read.csv("reference_data/cz_pre_feb_eparcel_regular_ex_syd.csv", head=TRUE, row.names = 1,  sep=",")
#cz_pre_feb_eparcel_express_ex_syd = read.csv("reference_data/cz_pre_feb_eparcel_express_ex_syd.csv", head=TRUE, row.names = 1,  sep=",")
# post feb 1st base rates. Left in for pulling comparison calcs
cz_post_feb_eparcel_regular_ex_mel = read.csv("reference_data/cz_post_feb_eparcel_regular_ex_mel.csv", head=TRUE, row.names = 1,  sep=",")
cz_post_feb_eparcel_express_ex_mel = read.csv("reference_data/cz_post_feb_eparcel_express_ex_mel.csv", head=TRUE, row.names = 1,  sep=",")
cz_post_feb_eparcel_regular_ex_syd = read.csv("reference_data/cz_post_feb_eparcel_regular_ex_syd.csv", head=TRUE, row.names = 1,  sep=",")
cz_post_feb_eparcel_express_ex_syd = read.csv("reference_data/cz_post_feb_eparcel_express_ex_syd.csv", head=TRUE, row.names = 1,  sep=",")
cz_post_feb_eparcel_express_ex_syd = read.csv("reference_data/cz_post_feb_eparcel_express_ex_syd.csv", head=TRUE, row.names = 1,  sep=",")
cz_post_feb_eparcel_wine_ex_mel = read.csv("reference_data/cz_post_feb_eparcel_wine_ex_mel.csv", head=TRUE, row.names = 1,  sep=",")
cz_post_feb_eparcel_wine_ex_syd = read.csv("reference_data/cz_post_feb_eparcel_wine_ex_syd.csv", head=TRUE, row.names = 1,  sep=",")
cz_post_feb_eparcel_international_express_merch = read.csv("reference_data/cz_post_feb_eparcel_international_express_merch.csv", head=TRUE, row.names = 1,  sep=",")
cz_post_feb_eparcel_international_standard = read.csv("reference_data/cz_post_feb_eparcel_international_standard.csv", head=TRUE, row.names = 1,  sep=",")
# custo mark up
customer_uplift_march_24 = read.csv("reference_data/customer_uplift_march_24.csv", head=TRUE, row.names = 1,  sep=",")
#custo codes
estore_custo_codes = read.csv("reference_data/estore_custo_codes.csv", head=TRUE, sep=",")
#colnames(cz_melb_espress) <- sub("^X", "", colnames(cz_melb_espress))
#### remove the summary lines we do not want ####
bill_cut1 <- bill[!grepl("charge|surcharge|admin|fuel", bill$DESCRIPTION, ignore.case = TRUE), ]
#bill_cut1 <- bill
#cutting the dataset down to just the metrics we need for ALL of the basic calculations
bill_cut1 <-  bill_cut1[,  c("REGION", "RECEIVING.COUNTRY", "CUSTOMER", "NAME_1", "NAME_2", "NAME_3", "DESCRIPTION", "BILLING.DOC", "SERVICE.DATE", "TO.ADDRESS", "CONSIGNMENT.ID", "ARTICLE.ID",
"BILLED.LENGTH", "BILLED.WIDTH", "BILLED.HEIGHT", "CUBIC.WEIGHT", "BILLED.WEIGHT", "ACTUAL.WEIGHT", "CHARGE.ZONE", "FROM.STATE", "AVG..UNIT.PRICE" ,"AMOUNT.INCL.TAX", "AMOUNT.EXCL.TAX", "DECLARED.WEIGHT")]
# get the lift service as per uplift card. This covers all thats in the description
bill_cut1$service <- ifelse(bill_cut1$REGION == "VIC" & bill_cut1$DESCRIPTION == "Parcel Post with Signature", "Regular.VIC",
ifelse(bill_cut1$REGION == "VIC" & bill_cut1$DESCRIPTION == "Express Post with Signature", "Express.VIC",
ifelse(bill_cut1$REGION == "NSW" & bill_cut1$DESCRIPTION == "Parcel Post with Signature", "Regular.NSW",
ifelse(bill_cut1$REGION == "NSW" & bill_cut1$DESCRIPTION == "Express Post with Signature", "Express.NSW",
ifelse(bill_cut1$DESCRIPTION == "Express Post Parcels (BYO up to 5kg)", "EPP_fivekg",
ifelse(bill_cut1$DESCRIPTION == "eParcel Return To Sender", "ep_return_to_sender",
ifelse(bill_cut1$DESCRIPTION == "Express Post eparcel returns", "exp_eparcel_returns",
ifelse(bill_cut1$DESCRIPTION == "eParcel Post Return", "reg_eparcel_returns",
ifelse(bill_cut1$DESCRIPTION == "eParcel Call For Return", "reg_ep_call_for_return",
ifelse(bill_cut1$REGION == "VIC" & bill_cut1$DESCRIPTION == "EPARCEL WINE STD", "Wine.VIC",
ifelse(bill_cut1$REGION == "NSW" & bill_cut1$DESCRIPTION == "EPARCEL WINE STD", "Wine.NSW",
ifelse(bill_cut1$DESCRIPTION == "PACK AND TRACK INTERNATIONAL", "International",
ifelse(bill_cut1$DESCRIPTION == "Express Courier International (eParcel)", "International",
ifelse(bill_cut1$DESCRIPTION == "APGL NZ Express w/Signature", "APGL",
ifelse(bill_cut1$DESCRIPTION %in% c("On Demand Tonight", "On Demand Afternoon"), "OnDemand",
NA)))))))))))))))
bill_cut1$uplift <- ifelse(bill_cut1$DESCRIPTION == "Express Post Parcels (BYO up to 5kg)", "EPP_fivekg",
ifelse(bill_cut1$DESCRIPTION %in% c("eParcel Return To Sender", "eParcel Post Return", "eParcel Call For Return"),
ifelse(bill_cut1$REGION == "VIC", "Regular.VIC",
ifelse(bill_cut1$REGION == "NSW", "Regular.NSW", NA)
),
ifelse(bill_cut1$DESCRIPTION == "Express Post eparcel returns",
ifelse(bill_cut1$REGION == "VIC", "Express.VIC",
ifelse(bill_cut1$REGION == "NSW", "Express.NSW", NA)
),
ifelse(bill_cut1$DESCRIPTION == "EPARCEL WINE STD",
ifelse(bill_cut1$REGION == "VIC", "Wine.VIC",
ifelse(bill_cut1$REGION == "NSW", "Wine.NSW", NA)
),
ifelse(bill_cut1$DESCRIPTION %in% c("PACK AND TRACK INTERNATIONAL", "Express Courier International (eParcel)", "International Returns Express"), "International",
ifelse(bill_cut1$REGION == "VIC",
ifelse(bill_cut1$DESCRIPTION == "Parcel Post with Signature", "Regular.VIC",
ifelse(bill_cut1$DESCRIPTION == "Express Post with Signature", "Express.VIC", NA)),
ifelse(bill_cut1$REGION == "NSW",
ifelse(bill_cut1$DESCRIPTION == "Parcel Post with Signature", "Regular.NSW",
ifelse(bill_cut1$DESCRIPTION == "Express Post with Signature", "Express.NSW", NA)), NA
)))))))
# Additional Conditions (no new rates for these)
bill_cut1$uplift <- ifelse(bill_cut1$DESCRIPTION %in% c("On Demand Tonight", "On Demand Afternoon"), "OnDemand", bill_cut1$uplift)
bill_cut1$uplift <- ifelse(bill_cut1$DESCRIPTION == "APGL NZ Express w/Signature", "APGL", bill_cut1$uplift)
#### customer code ####
# Function to extract letters before the first "-"
extract_letters <- function(text) {
split_text <- strsplit(as.character(text), " ")[[1]]
return(trimws(split_text[1]))
}
# Create a new column in bill_cut1 to store the corresponding values from DF2
bill_cut1$customer_code <- NA
# Loop through each row in bill_cut1
for (i in 1:nrow(bill_cut1)) {
# Get the trading name from bill_cut1$NAME_1
trading_name <- bill_cut1$NAME_1[i]
# Find the corresponding row index in DF2 where trading_name matches
match_index <- which(estore_custo_codes$trading_name == trading_name)
# If a match is found, assign the corresponding value from DF2 to bill_cut1
if (length(match_index) > 0) {
bill_cut1$customer_code[i] <- estore_custo_codes$eStore_code[match_index]
} else {
# Handle cases where no match is found
# Extract letters before the "-" in bill_cut1$NAME_1
letters_before_dash <- substr(trading_name, 1, regexpr("-", trading_name) - 1)
bill_cut1$customer_code[i] <- ifelse(letters_before_dash != "", letters_before_dash, "custo code not found")
}
}
# Apply the extract_letters function to customer_code where necessary
bill_cut1$customer_code2 <- sapply(bill_cut1$customer_code, function(code) {
if (code == "custo code not found") {
extract_letters(bill_cut1$NAME_1[i])
} else {
extract_letters(code)
}
})
#### create a col to determine if its GST free ####
# Define a function to apply the logic
is_gst_free <- function(zone) {
ifelse(zone %in% c("NF", "W4", "AAT", "Z1", "Z2", "Z3", "Z4", "Z5", "Z6", "Z7", "Z8", "Z9" ), "Yes", "No")
}
# Apply the function to create the new column
bill_cut1$is_gst_free_zone <- is_gst_free(bill_cut1$CHARGE.ZONE)
start_time <- Sys.time()
# Source the first script
source("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post/ingest_&_prep.R")
# Run the second script
source("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post/basic_charges_combined.R")
source("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post/basic_charge_and_input_merge_and_clean.R")
source("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post/back billing aggregation.R")
end_time <- Sys.time()
# Calculate execution time
execution_time <- end_time - start_time
print(paste("Execution Time:", execution_time))
start_time <- Sys.time()
# Source the first script
source("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post/ingest_&_prep.R")
# Run the second script
source("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post/basic_charges_combined.R")
source("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post/basic_charge_and_input_merge_and_clean.R")
source("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post/back billing aggregation.R")
end_time <- Sys.time()
# Calculate execution time
execution_time <- end_time - start_time
print(paste("Execution Time:", execution_time))
start_time <- Sys.time()
# Source the first script
source("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post/ingest_&_prep.R")
# Run the second script
source("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post/basic_charges_combined.R")
source("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post/basic_charge_and_input_merge_and_clean.R")
source("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post/back billing aggregation.R")
end_time <- Sys.time()
# Calculate execution time
execution_time <- end_time - start_time
print(paste("Execution Time:", execution_time))
start_time <- Sys.time()
# Source the first script
source("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post/ingest_&_prep.R")
# Run the second script
source("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post/basic_charges_combined.R")
source("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post/basic_charge_and_input_merge_and_clean.R")
source("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post/back billing aggregation.R")
end_time <- Sys.time()
# Calculate execution time
execution_time <- end_time - start_time
print(paste("Execution Time:", execution_time))
start_time <- Sys.time()
# Source the first script
source("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post/ingest_&_prep.R")
# Run the second script
source("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post/basic_charges_combined.R")
source("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post/basic_charge_and_input_merge_and_clean.R")
source("C:/Users/shaneb/Desktop/aus_repo_2/-aus_post/back billing aggregation.R")
end_time <- Sys.time()
# Calculate execution time
execution_time <- end_time - start_time
print(paste("Execution Time:", execution_time))
